// Copyright The Kubernetes Authors.
// SPDX-FileCopyrightText: (C) 2025 Intel Corporation
// SPDX-License-Identifier: Apache-2.0

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "/build/apis/gns.tsm.tanzu.vmware.com/v1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DnsLister helps list Dnses.
// All objects returned here must be treated as read-only.
type DnsLister interface {
	// List lists all Dnses in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.Dns, err error)
	// Get retrieves the Dns from the index for a given name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.Dns, error)
	DnsListerExpansion
}

// dnsLister implements the DnsLister interface.
type dnsLister struct {
	indexer cache.Indexer
}

// NewDnsLister returns a new DnsLister.
func NewDnsLister(indexer cache.Indexer) DnsLister {
	return &dnsLister{indexer: indexer}
}

// List lists all Dnses in the indexer.
func (s *dnsLister) List(selector labels.Selector) (ret []*v1.Dns, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.Dns))
	})
	return ret, err
}

// Get retrieves the Dns from the index for a given name.
func (s *dnsLister) Get(name string) (*v1.Dns, error) {
	obj, exists, err := s.indexer.GetByKey(name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("dns"), name)
	}
	return obj.(*v1.Dns), nil
}
