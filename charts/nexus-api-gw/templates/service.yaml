# SPDX-FileCopyrightText: 2025 Intel Corporation
#
# SPDX-License-Identifier: Apache-2.0
---
apiVersion: v1
kind: Service
metadata:
  name: svc-iam-nexus-api-gw
  labels:
    {{- include "iam.labels" . | nindent 4 }}
  namespace: {{ default  .Release.Namespace .Values.global.namespace }}
spec:
  type: {{ .Values.service.type }}
  ports:
    - protocol: TCP
      name: http
      port: {{ .Values.service.port }}
      targetPort: {{ .Values.service.port }}
  selector:
      app: {{ include "iam.fullname" . }}
---
{{- if .Values.service.external.enabled }}
apiVersion: v1
kind: Service
metadata:
  name: svc-iam-nexus-api-gw-external
  labels:
    app: {{ template "iam.fullname" . }}
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    release: "{{ .Release.Name }}"
    heritage: "{{ .Release.Service }}"
    {{- include "iam.labels" . | nindent 4 }}
spec:
  type: NodePort
  selector:
    {{- include "iam.selectorLabels" . | nindent 4 }}
  ports:
    - name: http
      port: {{ .Values.service.external.port }}
      nodePort: {{ .Values.service.external.nodePort }}
      protocol: {{ .Values.service.external.protocol }}
  {{- if .Values.metrics.enabled }}
    - port: {{ .Values.metrics.port }}
      targetPort: metrics
      nodePort: {{ .Values.metrics.external.nodePort }}
      protocol: TCP
      name: metrics
  {{- end }}
{{- end }}
---
{{- if .Values.traefikReverseProxy.enabled }}
apiVersion: traefik.containo.us/v1alpha1
kind: IngressRoute
metadata:
  name: {{ include "iam.fullname" . }}-http
  namespace: {{ .Values.traefikReverseProxy.gatewayNamespace }}
spec:
  entryPoints: # We listen to requests coming from ports 443
    - websecure
  routes:
    - match: "Host(`{{ .Values.traefikReverseProxy.host.grpc.name }}`) && PathPrefix(`/v`)"
      kind: Rule
      services:
        - name: svc-iam-nexus-api-gw
          port: {{ .Values.service.port }}
          scheme: http
          namespace: {{ .Release.Namespace }}
      priority: 30
      middlewares:
        - name: validate-jwt
        - name: iam-nexus-api-gw-http
        - name: secure-headers
    - match: "Host(`{{ .Values.traefikReverseProxy.host.grpc.name }}`) && PathPrefix(`/v1/orgs`)"
      kind: Rule
      services:
        - name: svc-iam-nexus-api-gw
          port: {{ .Values.service.port }}
          scheme: http
          namespace: {{ .Release.Namespace }}
      priority: 30
      middlewares:
        - name: validate-jwt
        - name: iam-nexus-api-gw-http
        - name: secure-headers
  tls:
    # Use the secret generated by cert-manager that resides in gateway-system namespace
    secretName: {{ .Values.traefikReverseProxy.secretName }}
{{- if .Values.traefikReverseProxy.tlsOption }}
    options:
      name: {{ .Values.traefikReverseProxy.tlsOption }}
      namespace: {{ .Values.traefikReverseProxy.gatewayNamespace }}
{{- end }}
{{- end }}
---
{{- if .Values.traefikReverseProxy.enabled }}
apiVersion: traefik.containo.us/v1alpha1
kind: IngressRoute
metadata:
  name: iam-umbrella-nexus-api-gw-api-docs
  namespace: {{ .Values.traefikReverseProxy.gatewayNamespace }}
spec:
  entryPoints: # We listen to requests coming from ports 443
    - websecure
  routes:
    - kind: Rule
      match: "Host(`{{ .Values.traefikReverseProxy.host.grpc.name }}`) && PathPrefix(`/edge-orchestrator.intel.com/openapi.json`)"
      middlewares:
      - name: iam-umbrella-api-docs-mw-ext-secure-headers
      - name: iam-nexus-api-gw-http
      priority: 30
      services:
      - name: svc-iam-nexus-api-gw
        namespace: {{ .Release.Namespace }}
        port: {{ .Values.service.port }}
        scheme: http
    - kind: Rule
      match: "Host(`{{ .Values.traefikReverseProxy.host.grpc.name }}`) && PathPrefix(`/edge-orchestrator.intel.com/docs`)"
      middlewares:
      - name: iam-umbrella-api-docs-mw-ext-secure-headers
      - name: iam-nexus-api-gw-http
      priority: 30
      services:
      - name: svc-iam-nexus-api-gw
        namespace: {{ .Release.Namespace }}
        port: {{ .Values.service.port }}
        scheme: http
  tls:
    # Use the secret generated by cert-manager that resides in gateway-system namespace
    secretName: {{ .Values.traefikReverseProxy.secretName }}
{{- if .Values.traefikReverseProxy.tlsOption }}
    options:
      name: {{ .Values.traefikReverseProxy.tlsOption }}
      namespace: {{ .Values.traefikReverseProxy.gatewayNamespace }}
{{- end }}
{{- end }}
