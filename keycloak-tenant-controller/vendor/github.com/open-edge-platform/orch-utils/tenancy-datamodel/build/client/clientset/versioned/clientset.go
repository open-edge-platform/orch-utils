// SPDX-FileCopyrightText: (C) 2025 Intel Corporation
// SPDX-License-Identifier: Apache-2.0

/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package versioned

import (
	"fmt"
	"net/http"
	apimappingconfigedgev1 "github.com/open-edge-platform/orch-utils/tenancy-datamodel/build/client/clientset/versioned/typed/apimappingconfig.edge-orchestrator.intel.com/v1"
	configedgev1 "github.com/open-edge-platform/orch-utils/tenancy-datamodel/build/client/clientset/versioned/typed/config.edge-orchestrator.intel.com/v1"
	folderedgev1 "github.com/open-edge-platform/orch-utils/tenancy-datamodel/build/client/clientset/versioned/typed/folder.edge-orchestrator.intel.com/v1"
	networkedgev1 "github.com/open-edge-platform/orch-utils/tenancy-datamodel/build/client/clientset/versioned/typed/network.edge-orchestrator.intel.com/v1"
	orgedgev1 "github.com/open-edge-platform/orch-utils/tenancy-datamodel/build/client/clientset/versioned/typed/org.edge-orchestrator.intel.com/v1"
	orgactivewatcheredgev1 "github.com/open-edge-platform/orch-utils/tenancy-datamodel/build/client/clientset/versioned/typed/orgactivewatcher.edge-orchestrator.intel.com/v1"
	orgwatcheredgev1 "github.com/open-edge-platform/orch-utils/tenancy-datamodel/build/client/clientset/versioned/typed/orgwatcher.edge-orchestrator.intel.com/v1"
	projectedgev1 "github.com/open-edge-platform/orch-utils/tenancy-datamodel/build/client/clientset/versioned/typed/project.edge-orchestrator.intel.com/v1"
	projectactivewatcheredgev1 "github.com/open-edge-platform/orch-utils/tenancy-datamodel/build/client/clientset/versioned/typed/projectactivewatcher.edge-orchestrator.intel.com/v1"
	projectwatcheredgev1 "github.com/open-edge-platform/orch-utils/tenancy-datamodel/build/client/clientset/versioned/typed/projectwatcher.edge-orchestrator.intel.com/v1"
	runtimeedgev1 "github.com/open-edge-platform/orch-utils/tenancy-datamodel/build/client/clientset/versioned/typed/runtime.edge-orchestrator.intel.com/v1"
	runtimefolderedgev1 "github.com/open-edge-platform/orch-utils/tenancy-datamodel/build/client/clientset/versioned/typed/runtimefolder.edge-orchestrator.intel.com/v1"
	runtimeorgedgev1 "github.com/open-edge-platform/orch-utils/tenancy-datamodel/build/client/clientset/versioned/typed/runtimeorg.edge-orchestrator.intel.com/v1"
	runtimeprojectedgev1 "github.com/open-edge-platform/orch-utils/tenancy-datamodel/build/client/clientset/versioned/typed/runtimeproject.edge-orchestrator.intel.com/v1"
	tenancyedgev1 "github.com/open-edge-platform/orch-utils/tenancy-datamodel/build/client/clientset/versioned/typed/tenancy.edge-orchestrator.intel.com/v1"

	discovery "k8s.io/client-go/discovery"
	rest "k8s.io/client-go/rest"
	flowcontrol "k8s.io/client-go/util/flowcontrol"
)

type Interface interface {
	Discovery() discovery.DiscoveryInterface
	ApimappingconfigEdgeV1() apimappingconfigedgev1.ApimappingconfigEdgeV1Interface
	ConfigEdgeV1() configedgev1.ConfigEdgeV1Interface
	FolderEdgeV1() folderedgev1.FolderEdgeV1Interface
	NetworkEdgeV1() networkedgev1.NetworkEdgeV1Interface
	OrgEdgeV1() orgedgev1.OrgEdgeV1Interface
	OrgactivewatcherEdgeV1() orgactivewatcheredgev1.OrgactivewatcherEdgeV1Interface
	OrgwatcherEdgeV1() orgwatcheredgev1.OrgwatcherEdgeV1Interface
	ProjectEdgeV1() projectedgev1.ProjectEdgeV1Interface
	ProjectactivewatcherEdgeV1() projectactivewatcheredgev1.ProjectactivewatcherEdgeV1Interface
	ProjectwatcherEdgeV1() projectwatcheredgev1.ProjectwatcherEdgeV1Interface
	RuntimeEdgeV1() runtimeedgev1.RuntimeEdgeV1Interface
	RuntimefolderEdgeV1() runtimefolderedgev1.RuntimefolderEdgeV1Interface
	RuntimeorgEdgeV1() runtimeorgedgev1.RuntimeorgEdgeV1Interface
	RuntimeprojectEdgeV1() runtimeprojectedgev1.RuntimeprojectEdgeV1Interface
	TenancyEdgeV1() tenancyedgev1.TenancyEdgeV1Interface
}

// Clientset contains the clients for groups.
type Clientset struct {
	*discovery.DiscoveryClient
	apimappingconfigEdgeV1     *apimappingconfigedgev1.ApimappingconfigEdgeV1Client
	configEdgeV1               *configedgev1.ConfigEdgeV1Client
	folderEdgeV1               *folderedgev1.FolderEdgeV1Client
	networkEdgeV1              *networkedgev1.NetworkEdgeV1Client
	orgEdgeV1                  *orgedgev1.OrgEdgeV1Client
	orgactivewatcherEdgeV1     *orgactivewatcheredgev1.OrgactivewatcherEdgeV1Client
	orgwatcherEdgeV1           *orgwatcheredgev1.OrgwatcherEdgeV1Client
	projectEdgeV1              *projectedgev1.ProjectEdgeV1Client
	projectactivewatcherEdgeV1 *projectactivewatcheredgev1.ProjectactivewatcherEdgeV1Client
	projectwatcherEdgeV1       *projectwatcheredgev1.ProjectwatcherEdgeV1Client
	runtimeEdgeV1              *runtimeedgev1.RuntimeEdgeV1Client
	runtimefolderEdgeV1        *runtimefolderedgev1.RuntimefolderEdgeV1Client
	runtimeorgEdgeV1           *runtimeorgedgev1.RuntimeorgEdgeV1Client
	runtimeprojectEdgeV1       *runtimeprojectedgev1.RuntimeprojectEdgeV1Client
	tenancyEdgeV1              *tenancyedgev1.TenancyEdgeV1Client
}

// ApimappingconfigEdgeV1 retrieves the ApimappingconfigEdgeV1Client
func (c *Clientset) ApimappingconfigEdgeV1() apimappingconfigedgev1.ApimappingconfigEdgeV1Interface {
	return c.apimappingconfigEdgeV1
}

// ConfigEdgeV1 retrieves the ConfigEdgeV1Client
func (c *Clientset) ConfigEdgeV1() configedgev1.ConfigEdgeV1Interface {
	return c.configEdgeV1
}

// FolderEdgeV1 retrieves the FolderEdgeV1Client
func (c *Clientset) FolderEdgeV1() folderedgev1.FolderEdgeV1Interface {
	return c.folderEdgeV1
}

// NetworkEdgeV1 retrieves the NetworkEdgeV1Client
func (c *Clientset) NetworkEdgeV1() networkedgev1.NetworkEdgeV1Interface {
	return c.networkEdgeV1
}

// OrgEdgeV1 retrieves the OrgEdgeV1Client
func (c *Clientset) OrgEdgeV1() orgedgev1.OrgEdgeV1Interface {
	return c.orgEdgeV1
}

// OrgactivewatcherEdgeV1 retrieves the OrgactivewatcherEdgeV1Client
func (c *Clientset) OrgactivewatcherEdgeV1() orgactivewatcheredgev1.OrgactivewatcherEdgeV1Interface {
	return c.orgactivewatcherEdgeV1
}

// OrgwatcherEdgeV1 retrieves the OrgwatcherEdgeV1Client
func (c *Clientset) OrgwatcherEdgeV1() orgwatcheredgev1.OrgwatcherEdgeV1Interface {
	return c.orgwatcherEdgeV1
}

// ProjectEdgeV1 retrieves the ProjectEdgeV1Client
func (c *Clientset) ProjectEdgeV1() projectedgev1.ProjectEdgeV1Interface {
	return c.projectEdgeV1
}

// ProjectactivewatcherEdgeV1 retrieves the ProjectactivewatcherEdgeV1Client
func (c *Clientset) ProjectactivewatcherEdgeV1() projectactivewatcheredgev1.ProjectactivewatcherEdgeV1Interface {
	return c.projectactivewatcherEdgeV1
}

// ProjectwatcherEdgeV1 retrieves the ProjectwatcherEdgeV1Client
func (c *Clientset) ProjectwatcherEdgeV1() projectwatcheredgev1.ProjectwatcherEdgeV1Interface {
	return c.projectwatcherEdgeV1
}

// RuntimeEdgeV1 retrieves the RuntimeEdgeV1Client
func (c *Clientset) RuntimeEdgeV1() runtimeedgev1.RuntimeEdgeV1Interface {
	return c.runtimeEdgeV1
}

// RuntimefolderEdgeV1 retrieves the RuntimefolderEdgeV1Client
func (c *Clientset) RuntimefolderEdgeV1() runtimefolderedgev1.RuntimefolderEdgeV1Interface {
	return c.runtimefolderEdgeV1
}

// RuntimeorgEdgeV1 retrieves the RuntimeorgEdgeV1Client
func (c *Clientset) RuntimeorgEdgeV1() runtimeorgedgev1.RuntimeorgEdgeV1Interface {
	return c.runtimeorgEdgeV1
}

// RuntimeprojectEdgeV1 retrieves the RuntimeprojectEdgeV1Client
func (c *Clientset) RuntimeprojectEdgeV1() runtimeprojectedgev1.RuntimeprojectEdgeV1Interface {
	return c.runtimeprojectEdgeV1
}

// TenancyEdgeV1 retrieves the TenancyEdgeV1Client
func (c *Clientset) TenancyEdgeV1() tenancyedgev1.TenancyEdgeV1Interface {
	return c.tenancyEdgeV1
}

// Discovery retrieves the DiscoveryClient
func (c *Clientset) Discovery() discovery.DiscoveryInterface {
	if c == nil {
		return nil
	}
	return c.DiscoveryClient
}

// NewForConfig creates a new Clientset for the given config.
// If config's RateLimiter is not set and QPS and Burst are acceptable,
// NewForConfig will generate a rate-limiter in configShallowCopy.
// NewForConfig is equivalent to NewForConfigAndClient(c, httpClient),
// where httpClient was generated with rest.HTTPClientFor(c).
func NewForConfig(c *rest.Config) (*Clientset, error) {
	configShallowCopy := *c

	if configShallowCopy.UserAgent == "" {
		configShallowCopy.UserAgent = rest.DefaultKubernetesUserAgent()
	}

	// share the transport between all clients
	httpClient, err := rest.HTTPClientFor(&configShallowCopy)
	if err != nil {
		return nil, err
	}

	return NewForConfigAndClient(&configShallowCopy, httpClient)
}

// NewForConfigAndClient creates a new Clientset for the given config and http client.
// Note the http client provided takes precedence over the configured transport values.
// If config's RateLimiter is not set and QPS and Burst are acceptable,
// NewForConfigAndClient will generate a rate-limiter in configShallowCopy.
func NewForConfigAndClient(c *rest.Config, httpClient *http.Client) (*Clientset, error) {
	configShallowCopy := *c
	if configShallowCopy.RateLimiter == nil && configShallowCopy.QPS > 0 {
		if configShallowCopy.Burst <= 0 {
			return nil, fmt.Errorf("burst is required to be greater than 0 when RateLimiter is not set and QPS is set to greater than 0")
		}
		configShallowCopy.RateLimiter = flowcontrol.NewTokenBucketRateLimiter(configShallowCopy.QPS, configShallowCopy.Burst)
	}

	var cs Clientset
	var err error
	cs.apimappingconfigEdgeV1, err = apimappingconfigedgev1.NewForConfigAndClient(&configShallowCopy, httpClient)
	if err != nil {
		return nil, err
	}
	cs.configEdgeV1, err = configedgev1.NewForConfigAndClient(&configShallowCopy, httpClient)
	if err != nil {
		return nil, err
	}
	cs.folderEdgeV1, err = folderedgev1.NewForConfigAndClient(&configShallowCopy, httpClient)
	if err != nil {
		return nil, err
	}
	cs.networkEdgeV1, err = networkedgev1.NewForConfigAndClient(&configShallowCopy, httpClient)
	if err != nil {
		return nil, err
	}
	cs.orgEdgeV1, err = orgedgev1.NewForConfigAndClient(&configShallowCopy, httpClient)
	if err != nil {
		return nil, err
	}
	cs.orgactivewatcherEdgeV1, err = orgactivewatcheredgev1.NewForConfigAndClient(&configShallowCopy, httpClient)
	if err != nil {
		return nil, err
	}
	cs.orgwatcherEdgeV1, err = orgwatcheredgev1.NewForConfigAndClient(&configShallowCopy, httpClient)
	if err != nil {
		return nil, err
	}
	cs.projectEdgeV1, err = projectedgev1.NewForConfigAndClient(&configShallowCopy, httpClient)
	if err != nil {
		return nil, err
	}
	cs.projectactivewatcherEdgeV1, err = projectactivewatcheredgev1.NewForConfigAndClient(&configShallowCopy, httpClient)
	if err != nil {
		return nil, err
	}
	cs.projectwatcherEdgeV1, err = projectwatcheredgev1.NewForConfigAndClient(&configShallowCopy, httpClient)
	if err != nil {
		return nil, err
	}
	cs.runtimeEdgeV1, err = runtimeedgev1.NewForConfigAndClient(&configShallowCopy, httpClient)
	if err != nil {
		return nil, err
	}
	cs.runtimefolderEdgeV1, err = runtimefolderedgev1.NewForConfigAndClient(&configShallowCopy, httpClient)
	if err != nil {
		return nil, err
	}
	cs.runtimeorgEdgeV1, err = runtimeorgedgev1.NewForConfigAndClient(&configShallowCopy, httpClient)
	if err != nil {
		return nil, err
	}
	cs.runtimeprojectEdgeV1, err = runtimeprojectedgev1.NewForConfigAndClient(&configShallowCopy, httpClient)
	if err != nil {
		return nil, err
	}
	cs.tenancyEdgeV1, err = tenancyedgev1.NewForConfigAndClient(&configShallowCopy, httpClient)
	if err != nil {
		return nil, err
	}

	cs.DiscoveryClient, err = discovery.NewDiscoveryClientForConfigAndClient(&configShallowCopy, httpClient)
	if err != nil {
		return nil, err
	}
	return &cs, nil
}

// NewForConfigOrDie creates a new Clientset for the given config and
// panics if there is an error in the config.
func NewForConfigOrDie(c *rest.Config) *Clientset {
	cs, err := NewForConfig(c)
	if err != nil {
		panic(err)
	}
	return cs
}

// New creates a new Clientset for the given RESTClient.
func New(c rest.Interface) *Clientset {
	var cs Clientset
	cs.apimappingconfigEdgeV1 = apimappingconfigedgev1.New(c)
	cs.configEdgeV1 = configedgev1.New(c)
	cs.folderEdgeV1 = folderedgev1.New(c)
	cs.networkEdgeV1 = networkedgev1.New(c)
	cs.orgEdgeV1 = orgedgev1.New(c)
	cs.orgactivewatcherEdgeV1 = orgactivewatcheredgev1.New(c)
	cs.orgwatcherEdgeV1 = orgwatcheredgev1.New(c)
	cs.projectEdgeV1 = projectedgev1.New(c)
	cs.projectactivewatcherEdgeV1 = projectactivewatcheredgev1.New(c)
	cs.projectwatcherEdgeV1 = projectwatcheredgev1.New(c)
	cs.runtimeEdgeV1 = runtimeedgev1.New(c)
	cs.runtimefolderEdgeV1 = runtimefolderedgev1.New(c)
	cs.runtimeorgEdgeV1 = runtimeorgedgev1.New(c)
	cs.runtimeprojectEdgeV1 = runtimeprojectedgev1.New(c)
	cs.tenancyEdgeV1 = tenancyedgev1.New(c)

	cs.DiscoveryClient = discovery.NewDiscoveryClient(c)
	return &cs
}
