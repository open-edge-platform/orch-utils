// SPDX-FileCopyrightText: (C) 2025 Intel Corporation
// SPDX-License-Identifier: Apache-2.0

// Code generated by nexus. DO NOT EDIT.

package v1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	"github.com/open-edge-platform/orch-utils/tenancy-datamodel/build/common"
)

// +k8s:openapi-gen=true
type Child struct {
	Group string `json:"group" yaml:"group"`
	Kind  string `json:"kind" yaml:"kind"`
	Name  string `json:"name" yaml:"name"`
}

// +k8s:openapi-gen=true
type Link struct {
	Group string `json:"group" yaml:"group"`
	Kind  string `json:"kind" yaml:"kind"`
	Name  string `json:"name" yaml:"name"`
}

// +k8s:openapi-gen=true
type SyncerStatus struct {
	EtcdVersion    int64 `json:"etcdVersion, omitempty" yaml:"etcdVersion, omitempty"`
	CRGenerationId int64 `json:"cRGenerationId, omitempty" yaml:"cRGenerationId, omitempty"`
}

// +k8s:openapi-gen=true
type NexusStatus struct {
	SourceGeneration int64        `json:"sourceGeneration, omitempty" yaml:"sourceGeneration, omitempty"`
	RemoteGeneration int64        `json:"remoteGeneration, omitempty" yaml:"remoteGeneration, omitempty"`
	SyncerStatus     SyncerStatus `json:"syncerStatus, omitempty" yaml:"syncerStatus, omitempty"`
}

/* ------------------- CRDs definitions ------------------- */

// +genclient
// +genclient:noStatus
// +genclient:nonNamespaced
// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
// +k8s:openapi-gen=true
type Org struct {
	metav1.TypeMeta   `json:",inline" yaml:",inline"`
	metav1.ObjectMeta `json:"metadata" yaml:"metadata"`
	Spec              OrgSpec        `json:"spec,omitempty" yaml:"spec,omitempty"`
	Status            OrgNexusStatus `json:"status,omitempty" yaml:"status,omitempty"`
}

// +k8s:openapi-gen=true
type OrgNexusStatus struct {
	OrgStatus OrgStatus   `json:"orgStatus,omitempty" yaml:"orgStatus,omitempty"`
	Nexus     NexusStatus `json:"nexus,omitempty" yaml:"nexus,omitempty"`
}

func (c *Org) CRDName() string {
	return "orgs.org.edge-orchestrator.intel.com"
}

func (c *Org) DisplayName() string {
	if c.GetLabels() != nil {
		return c.GetLabels()[common.DisplayNameLabel]
	}
	return ""
}

// +k8s:openapi-gen=true
type OrgSpec struct {
	Description string           `json:"description" yaml:"description"`
	FoldersGvk  map[string]Child `json:"foldersGvk,omitempty" yaml:"foldersGvk,omitempty" nexus:"children"`
}

// +k8s:deepcopy-gen:interfaces=k8s.io/apimachinery/pkg/runtime.Object
type OrgList struct {
	metav1.TypeMeta `json:",inline" yaml:",inline"`
	metav1.ListMeta `json:"metadata" yaml:"metadata"`
	Items           []Org `json:"items" yaml:"items"`
}

// +k8s:openapi-gen=true
type OrgStatus struct {
	StatusIndicator TenancyRequestStatus `json:"statusIndicator" yaml:"statusIndicator"`
	Message         string               `json:"message" yaml:"message"`
	TimeStamp       uint64               `json:"timeStamp" yaml:"timeStamp"`
	UID             string               `json:"uID" yaml:"uID"`
}

type TenancyRequestStatus string

const (
	StatusIndicationUnspecified TenancyRequestStatus = "STATUS_INDICATION_UNSPECIFIED"
	StatusIndicationError       TenancyRequestStatus = "STATUS_INDICATION_ERROR"
	StatusIndicationInProgress  TenancyRequestStatus = "STATUS_INDICATION_IN_PROGRESS"
	StatusIndicationIdle        TenancyRequestStatus = "STATUS_INDICATION_IDLE"
)
