openapi: 3.0.3
info:
  title: Edge Infrastructure Manager
  description: Edge Infrastructure Manager API - License Apache 2.0
  version: 0.2.0-dev
servers:
- url: '{apiRoot}'
  variables:
    apiRoot:
      default: https://<multitenancy-gateway-host>
tags:
- description: Host.
  name: HostService
- description: Instance.
  name: InstanceService
- description: LocalAccount.
  name: LocalAccountService
- description: Location.
  name: LocationService
- description: OperatingSystem.
  name: OperatingSystemService
- description: Provider.
  name: ProviderService
- description: Region.
  name: RegionService
- description: Schedules.
  name: ScheduleService
- description: Site.
  name: SiteService
- description: TelemetryLogsGroup.
  name: TelemetryLogsGroupService
- description: TelemetryLogsProfile.
  name: TelemetryLogsProfileService
- description: TelemetryMetricsGroup.
  name: TelemetryMetricsGroupService
- description: TelemetryMetricsProfile.
  name: TelemetryMetricsProfileService
- description: WorkloadMember.
  name: WorkloadMemberService
- description: Workload.
  name: WorkloadService
security:
- BearerAuth: []
paths:
  /v2/projects/{projectName}/compute/hosts/{resourceId}:
    delete:
      description: Delete a host.
      operationId: HostService_DeleteHost
      parameters:
      - description: Name of the host host to be deleted.
        in: path
        name: resourceId
        required: true
        schema:
          type: string
      - description: unique projectName for the resource
        in: path
        name: projectName
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteHostResponse'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: DeleteHost
      tags:
      - HostService
    get:
      description: Get a specific host.
      operationId: HostService_GetHost
      parameters:
      - description: Name of the requested host.
        in: path
        name: resourceId
        required: true
        schema:
          type: string
      - description: unique projectName for the resource
        in: path
        name: projectName
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HostResource'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: GetHost
      tags:
      - HostService
    patch:
      description: Patch a host.
      operationId: HostService_PatchHost
      parameters:
      - description: ID of the resource to be updated.
        in: path
        name: resourceId
        required: true
        schema:
          type: string
      - description: Field mask to be applied on the patch of host.
        in: query
        name: fieldMask
        schema:
          format: field-mask
          type: string
      - description: unique projectName for the resource
        in: path
        name: projectName
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HostResource'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HostResource'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: PatchHost
      tags:
      - HostService
    put:
      description: Update a host.
      operationId: HostService_UpdateHost
      parameters:
      - description: Name of the host host to be updated.
        in: path
        name: resourceId
        required: true
        schema:
          type: string
      - description: unique projectName for the resource
        in: path
        name: projectName
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HostResource'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HostResource'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: UpdateHost
      tags:
      - HostService
  /v2/projects/{projectName}/compute/hosts/{resourceId}/invalidate:
    put:
      description: Invalidate a host.
      operationId: HostService_InvalidateHost
      parameters:
      - in: path
        name: resourceId
        required: true
        schema:
          type: string
      - in: query
        name: note
        schema:
          maxLength: 512
          minLength: 1
          pattern: ^$|^[a-zA-Z-_0-9./:;=@?!#,<>*()" ]+$
          type: string
      - description: unique projectName for the resource
        in: path
        name: projectName
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidateHostResponse'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: InvalidateHost
      tags:
      - HostService
  /v2/projects/{projectName}/compute/hosts/{resourceId}/onboard:
    patch:
      description: Onboard a host.
      operationId: HostService_OnboardHost
      parameters:
      - in: path
        name: resourceId
        required: true
        schema:
          type: string
      - description: unique projectName for the resource
        in: path
        name: projectName
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OnboardHostResponse'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: OnboardHost
      tags:
      - HostService
  /v2/projects/{projectName}/compute/hosts/{resourceId}/register:
    patch:
      description: Update a host register.
      operationId: HostService_RegisterUpdateHost
      parameters:
      - in: path
        name: resourceId
        required: true
        schema:
          type: string
      - description: unique projectName for the resource
        in: path
        name: projectName
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HostRegister'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HostResource'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: RegisterUpdateHost
      tags:
      - HostService
  /v2/projects/{projectName}/compute/hosts/register:
    post:
      description: Register a host.
      operationId: HostService_RegisterHost
      parameters:
      - in: query
        name: resourceId
        schema:
          pattern: ^host-[0-9a-f]{8}$
          type: string
      - description: unique projectName for the resource
        in: path
        name: projectName
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HostRegister'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HostResource'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: RegisterHost
      tags:
      - HostService
  /v2/projects/{projectName}/compute/instances:
    get:
      description: Get a list of instances.
      operationId: InstanceService_ListInstances
      parameters:
      - description: Optional comma separated list of fields to specify a sorting
          order. See https://google.aip.dev/132 for details.
        in: query
        name: orderBy
        schema:
          maxLength: 1000
          pattern: ^$|^[a-zA-Z-_0-9., ]+$
          type: string
      - description: Optional filter to return only item of interest. See https://google.aip.dev/160
          for details.
        in: query
        name: filter
        schema:
          maxLength: 1000
          pattern: ^$|^[a-zA-Z-_0-9.,:/=*(){}"' ]+$
          type: string
      - description: Defines the amount of items to be contained in a single page.
          Default of 20.
        in: query
        name: pageSize
        schema:
          format: int32
          maximum: 100
          minimum: 1
          type: integer
      - description: Index of the first item to return. This allows skipping items.
        in: query
        name: offset
        schema:
          format: int32
          maximum: 10000
          type: integer
      - description: unique projectName for the resource
        in: path
        name: projectName
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListInstancesResponse'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: ListInstances
      tags:
      - InstanceService
    post:
      description: Create a instance.
      operationId: InstanceService_CreateInstance
      parameters:
      - description: unique projectName for the resource
        in: path
        name: projectName
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InstanceResource'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstanceResource'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: CreateInstance
      tags:
      - InstanceService
  /v2/projects/{projectName}/compute/instances/{resourceId}:
    delete:
      description: Delete a instance.
      operationId: InstanceService_DeleteInstance
      parameters:
      - description: Name of the instance instance to be deleted.
        in: path
        name: resourceId
        required: true
        schema:
          type: string
      - description: unique projectName for the resource
        in: path
        name: projectName
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteInstanceResponse'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: DeleteInstance
      tags:
      - InstanceService
    get:
      description: Get a specific instance.
      operationId: InstanceService_GetInstance
      parameters:
      - description: Name of the requested instance.
        in: path
        name: resourceId
        required: true
        schema:
          type: string
      - description: unique projectName for the resource
        in: path
        name: projectName
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstanceResource'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: GetInstance
      tags:
      - InstanceService
    patch:
      description: Patch a instance.
      operationId: InstanceService_PatchInstance
      parameters:
      - description: ID of the resource to be updated.
        in: path
        name: resourceId
        required: true
        schema:
          type: string
      - description: Field mask to be applied on the patch of instance.
        in: query
        name: fieldMask
        schema:
          format: field-mask
          type: string
      - description: unique projectName for the resource
        in: path
        name: projectName
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InstanceResource'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstanceResource'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: PatchInstance
      tags:
      - InstanceService
    put:
      description: Update a instance.
      operationId: InstanceService_UpdateInstance
      parameters:
      - description: ID of the resource to be updated.
        in: path
        name: resourceId
        required: true
        schema:
          type: string
      - description: unique projectName for the resource
        in: path
        name: projectName
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InstanceResource'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstanceResource'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: UpdateInstance
      tags:
      - InstanceService
  /v2/projects/{projectName}/compute/instances/{resourceId}/invalidate:
    put:
      description: Invalidate a instance.
      operationId: InstanceService_InvalidateInstance
      parameters:
      - in: path
        name: resourceId
        required: true
        schema:
          type: string
      - description: unique projectName for the resource
        in: path
        name: projectName
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidateInstanceResponse'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: InvalidateInstance
      tags:
      - InstanceService
  /v2/projects/{projectName}/compute/os:
    get:
      description: Get a list of OSs.
      operationId: OperatingSystemService_ListOperatingSystems
      parameters:
      - description: Optional comma separated list of fields to specify a sorting
          order. See https://google.aip.dev/132 for details.
        in: query
        name: orderBy
        schema:
          maxLength: 1000
          pattern: ^$|^[a-zA-Z-_0-9., ]+$
          type: string
      - description: Optional filter to return only item of interest. See https://google.aip.dev/160
          for details.
        in: query
        name: filter
        schema:
          maxLength: 1000
          pattern: ^$|^[a-zA-Z-_0-9.,:/=*(){}"' ]+$
          type: string
      - description: Defines the amount of items to be contained in a single page.
          Default of 20.
        in: query
        name: pageSize
        schema:
          format: int32
          maximum: 100
          minimum: 1
          type: integer
      - description: Index of the first item to return. This allows skipping items.
        in: query
        name: offset
        schema:
          format: int32
          maximum: 10000
          type: integer
      - description: unique projectName for the resource
        in: path
        name: projectName
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListOperatingSystemsResponse'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: ListOperatingSystems
      tags:
      - OperatingSystemService
    post:
      description: Create an OS
      operationId: OperatingSystemService_CreateOperatingSystem
      parameters:
      - description: unique projectName for the resource
        in: path
        name: projectName
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OperatingSystemResource'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperatingSystemResource'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: CreateOperatingSystem
      tags:
      - OperatingSystemService
  /v2/projects/{projectName}/compute/os/{resourceId}:
    delete:
      description: Delete an OS.
      operationId: OperatingSystemService_DeleteOperatingSystem
      parameters:
      - description: Name of the os os to be deleted.
        in: path
        name: resourceId
        required: true
        schema:
          type: string
      - description: unique projectName for the resource
        in: path
        name: projectName
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteOperatingSystemResponse'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: DeleteOperatingSystem
      tags:
      - OperatingSystemService
    get:
      description: Get a specific OS.
      operationId: OperatingSystemService_GetOperatingSystem
      parameters:
      - description: Name of the requested os.
        in: path
        name: resourceId
        required: true
        schema:
          type: string
      - description: unique projectName for the resource
        in: path
        name: projectName
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperatingSystemResource'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: GetOperatingSystem
      tags:
      - OperatingSystemService
    patch:
      description: Patch an OS.
      operationId: OperatingSystemService_PatchOperatingSystem
      parameters:
      - description: ID of the resource to be updated.
        in: path
        name: resourceId
        required: true
        schema:
          type: string
      - description: Field mask to be applied on the patch of os.
        in: query
        name: fieldMask
        schema:
          format: field-mask
          type: string
      - description: unique projectName for the resource
        in: path
        name: projectName
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OperatingSystemResource'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperatingSystemResource'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: PatchOperatingSystem
      tags:
      - OperatingSystemService
    put:
      description: Update an OS.
      operationId: OperatingSystemService_UpdateOperatingSystem
      parameters:
      - description: Name of the os os to be updated.
        in: path
        name: resourceId
        required: true
        schema:
          type: string
      - description: unique projectName for the resource
        in: path
        name: projectName
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OperatingSystemResource'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OperatingSystemResource'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: UpdateOperatingSystem
      tags:
      - OperatingSystemService
  /v2/projects/{projectName}/compute/schedules:
    get:
      description: Get a list of schedules (single/repeated).
      operationId: ScheduleService_ListSchedules
      parameters:
      - description: Defines the amount of items to be contained in a single page.
          Default of 20.
        in: query
        name: pageSize
        schema:
          format: int32
          maximum: 100
          minimum: 1
          type: integer
      - description: Index of the first item to return. This allows skipping items.
        in: query
        name: offset
        schema:
          format: int32
          maximum: 10000
          type: integer
      - description: The host ID target of the schedules. If not specified, returns
          all schedules (given the other query params). If specified, returns the
          schedules that have the specified host ID applied to them, i.e., target
          including the inherited ones (parent site if not null). If null, returns
          all the schedules without a host ID as target.
        in: query
        name: hostId
        schema:
          pattern: ^host-[0-9a-f]{8}$
          type: string
      - description: The site ID target of the schedules. If not specified, returns
          all schedules (given the other query params). If specified, returns the
          schedules that have the specified site ID applied to them, i.e., target
          including the inherited ones. If null, returns all the schedules without
          a site ID as target
        in: query
        name: siteId
        schema:
          pattern: ^site-[0-9a-f]{8}$
          type: string
      - description: The region ID target of the schedules. If not specified, returns
          all schedules (given the other query params). If specified, returns the
          schedules that have the specified region ID applied to them, i.e., target
          including the inherited ones (parent region if not null). If null, returns
          all the schedules without a region ID as target.
        in: query
        name: regionId
        schema:
          pattern: ^region-[0-9a-f]{8}$
          type: string
      - description: Filter based on the timestamp, expected to be UNIX epoch UTC
          timestamp in seconds.
        in: query
        name: unixEpoch
        schema:
          pattern: ^[0-9]+$
          type: string
      - description: unique projectName for the resource
        in: path
        name: projectName
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListSchedulesResponse'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: ListSchedules
      tags:
      - ScheduleService
  /v2/projects/{projectName}/compute/workloads:
    get:
      description: Get a list of workloads.
      operationId: WorkloadService_ListWorkloads
      parameters:
      - description: Optional comma separated list of fields to specify a sorting
          order. See https://google.aip.dev/132 for details.
        in: query
        name: orderBy
        schema:
          maxLength: 1000
          pattern: ^$|^[a-zA-Z-_0-9., ]+$
          type: string
      - description: Optional filter to return only item of interest. See https://google.aip.dev/160
          for details.
        in: query
        name: filter
        schema:
          maxLength: 1000
          pattern: ^$|^[a-zA-Z-_0-9.,:/=*(){}"' ]+$
          type: string
      - description: Defines the amount of items to be contained in a single page.
          Default of 20.
        in: query
        name: pageSize
        schema:
          format: int32
          maximum: 100
          minimum: 1
          type: integer
      - description: Index of the first item to return. This allows skipping items.
        in: query
        name: offset
        schema:
          format: int32
          maximum: 10000
          type: integer
      - description: unique projectName for the resource
        in: path
        name: projectName
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListWorkloadsResponse'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: ListWorkloads
      tags:
      - WorkloadService
    post:
      description: Create a workload.
      operationId: WorkloadService_CreateWorkload
      parameters:
      - description: unique projectName for the resource
        in: path
        name: projectName
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WorkloadResource'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkloadResource'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: CreateWorkload
      tags:
      - WorkloadService
  /v2/projects/{projectName}/compute/workloads/{resourceId}:
    delete:
      description: Delete a workload.
      operationId: WorkloadService_DeleteWorkload
      parameters:
      - description: Name of the workload workload to be deleted.
        in: path
        name: resourceId
        required: true
        schema:
          type: string
      - description: unique projectName for the resource
        in: path
        name: projectName
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteWorkloadResponse'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: DeleteWorkload
      tags:
      - WorkloadService
    get:
      description: Get a specific workload.
      operationId: WorkloadService_GetWorkload
      parameters:
      - description: Name of the requested workload.
        in: path
        name: resourceId
        required: true
        schema:
          type: string
      - description: unique projectName for the resource
        in: path
        name: projectName
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkloadResource'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: GetWorkload
      tags:
      - WorkloadService
    patch:
      description: Patch a workload.
      operationId: WorkloadService_PatchWorkload
      parameters:
      - description: ID of the resource to be updated.
        in: path
        name: resourceId
        required: true
        schema:
          type: string
      - description: Field mask to be applied on the patch of workload.
        in: query
        name: fieldMask
        schema:
          format: field-mask
          type: string
      - description: unique projectName for the resource
        in: path
        name: projectName
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WorkloadResource'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkloadResource'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: PatchWorkload
      tags:
      - WorkloadService
    put:
      description: Update a workload.
      operationId: WorkloadService_UpdateWorkload
      parameters:
      - description: Name of the workload workload to be updated.
        in: path
        name: resourceId
        required: true
        schema:
          type: string
      - description: unique projectName for the resource
        in: path
        name: projectName
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WorkloadResource'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkloadResource'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: UpdateWorkload
      tags:
      - WorkloadService
  /v2/projects/{projectName}/compute/workloads/{resourceId}/members:
    get:
      description: Get a list of workload_members.
      operationId: WorkloadMemberService_ListWorkloadMembers
      parameters:
      - description: Optional comma separated list of fields to specify a sorting
          order. See https://google.aip.dev/132 for details.
        in: query
        name: orderBy
        schema:
          maxLength: 1000
          pattern: ^$|^[a-zA-Z-_0-9., ]+$
          type: string
      - description: Optional filter to return only item of interest. See https://google.aip.dev/160
          for details.
        in: query
        name: filter
        schema:
          maxLength: 1000
          pattern: ^$|^[a-zA-Z-_0-9.,:/=*(){}"' ]+$
          type: string
      - description: Defines the amount of items to be contained in a single page.
          Default of 20.
        in: query
        name: pageSize
        schema:
          format: int32
          maximum: 100
          minimum: 1
          type: integer
      - description: Index of the first item to return. This allows skipping items.
        in: query
        name: offset
        schema:
          format: int32
          maximum: 10000
          type: integer
      - description: unique projectName for the resource
        in: path
        name: projectName
        required: true
        schema:
          type: string
      - description: unique resourceId for the resource
        in: path
        name: resourceId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListWorkloadMembersResponse'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: ListWorkloadMembers
      tags:
      - WorkloadMemberService
    post:
      description: Create a workload_member.
      operationId: WorkloadMemberService_CreateWorkloadMember
      parameters:
      - description: unique projectName for the resource
        in: path
        name: projectName
        required: true
        schema:
          type: string
      - description: unique resourceId for the resource
        in: path
        name: resourceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WorkloadMember'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkloadMember'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: CreateWorkloadMember
      tags:
      - WorkloadMemberService
  /v2/projects/{projectName}/compute/workloads/{resourceId}/members/{resourceId}:
    delete:
      description: Delete a workload_member.
      operationId: WorkloadMemberService_DeleteWorkloadMember
      parameters:
      - description: Name of the workload_member workload_member to be deleted.
        in: path
        name: resourceId
        required: true
        schema:
          type: string
      - description: unique projectName for the resource
        in: path
        name: projectName
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteWorkloadMemberResponse'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: DeleteWorkloadMember
      tags:
      - WorkloadMemberService
    get:
      description: Get a specific workload_member.
      operationId: WorkloadMemberService_GetWorkloadMember
      parameters:
      - description: Name of the requested workload_member.
        in: path
        name: resourceId
        required: true
        schema:
          type: string
      - description: unique projectName for the resource
        in: path
        name: projectName
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkloadMember'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: GetWorkloadMember
      tags:
      - WorkloadMemberService
    patch:
      description: Patch a workload_member.
      operationId: WorkloadMemberService_PatchWorkloadMember
      parameters:
      - description: ID of the resource to be updated.
        in: path
        name: resourceId
        required: true
        schema:
          type: string
      - description: Field mask to be applied on the patch of workload_member.
        in: query
        name: fieldMask
        schema:
          format: field-mask
          type: string
      - description: unique projectName for the resource
        in: path
        name: projectName
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WorkloadMember'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkloadMember'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: PatchWorkloadMember
      tags:
      - WorkloadMemberService
    put:
      description: Update a workload_member.
      operationId: WorkloadMemberService_UpdateWorkloadMember
      parameters:
      - description: Name of the workload_member workload_member to be updated.
        in: path
        name: resourceId
        required: true
        schema:
          type: string
      - description: unique projectName for the resource
        in: path
        name: projectName
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WorkloadMember'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkloadMember'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: UpdateWorkloadMember
      tags:
      - WorkloadMemberService
  /v2/projects/{projectName}/localAccounts:
    get:
      description: Get a list of providers.
      operationId: LocalAccountService_ListLocalAccounts
      parameters:
      - description: Optional comma separated list of fields to specify a sorting
          order. See https://google.aip.dev/132 for details.
        in: query
        name: orderBy
        schema:
          maxLength: 1000
          pattern: ^$|^[a-zA-Z-_0-9., ]+$
          type: string
      - description: Optional filter to return only item of interest. See https://google.aip.dev/160
          for details.
        in: query
        name: filter
        schema:
          maxLength: 1000
          pattern: ^$|^[a-zA-Z-_0-9.,:/=*(){}"' ]+$
          type: string
      - description: Defines the amount of items to be contained in a single page.
          Default of 20.
        in: query
        name: pageSize
        schema:
          format: int32
          maximum: 100
          minimum: 1
          type: integer
      - description: Index of the first item to return. This allows skipping items.
        in: query
        name: offset
        schema:
          format: int32
          maximum: 10000
          type: integer
      - description: unique projectName for the resource
        in: path
        name: projectName
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListLocalAccountsResponse'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: ListLocalAccounts
      tags:
      - LocalAccountService
    post:
      description: Create a localAccount.
      operationId: LocalAccountService_CreateLocalAccount
      parameters:
      - description: unique projectName for the resource
        in: path
        name: projectName
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LocalAccountResource'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LocalAccountResource'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: CreateLocalAccount
      tags:
      - LocalAccountService
  /v2/projects/{projectName}/localAccounts/{resourceId}:
    delete:
      description: Delete a provider.
      operationId: LocalAccountService_DeleteLocalAccount
      parameters:
      - description: Name of the localaccount to be deleted.
        in: path
        name: resourceId
        required: true
        schema:
          type: string
      - description: unique projectName for the resource
        in: path
        name: projectName
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteLocalAccountResponse'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: DeleteLocalAccount
      tags:
      - LocalAccountService
    get:
      description: Get a specific provider.
      operationId: LocalAccountService_GetLocalAccount
      parameters:
      - description: Name of the requested localaccount.
        in: path
        name: resourceId
        required: true
        schema:
          type: string
      - description: unique projectName for the resource
        in: path
        name: projectName
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LocalAccountResource'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: GetLocalAccount
      tags:
      - LocalAccountService
  /v2/projects/{projectName}/locations:
    get:
      description: Get a list of locations.
      operationId: LocationService_ListLocations
      parameters:
      - description: Filter locations by name
        in: query
        name: name
        schema:
          type: string
      - description: Return site locations
        in: query
        name: showSites
        schema:
          type: boolean
      - description: Return region locations
        in: query
        name: showRegions
        schema:
          type: boolean
      - description: unique projectName for the resource
        in: path
        name: projectName
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListLocationsResponse'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: ListLocations
      tags:
      - LocationService
  /v2/projects/{projectName}/providers:
    get:
      description: Get a list of providers.
      operationId: ProviderService_ListProviders
      parameters:
      - description: Optional comma separated list of fields to specify a sorting
          order. See https://google.aip.dev/132 for details.
        in: query
        name: orderBy
        schema:
          maxLength: 1000
          pattern: ^$|^[a-zA-Z-_0-9., ]+$
          type: string
      - description: Optional filter to return only item of interest. See https://google.aip.dev/160
          for details.
        in: query
        name: filter
        schema:
          maxLength: 1000
          pattern: ^$|^[a-zA-Z-_0-9.,:/=*(){}"' ]+$
          type: string
      - description: Defines the amount of items to be contained in a single page.
          Default of 20.
        in: query
        name: pageSize
        schema:
          format: int32
          maximum: 100
          minimum: 1
          type: integer
      - description: Index of the first item to return. This allows skipping items.
        in: query
        name: offset
        schema:
          format: int32
          maximum: 10000
          type: integer
      - description: unique projectName for the resource
        in: path
        name: projectName
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListProvidersResponse'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: ListProviders
      tags:
      - ProviderService
    post:
      description: Create a provider.
      operationId: ProviderService_CreateProvider
      parameters:
      - description: unique projectName for the resource
        in: path
        name: projectName
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProviderResource'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProviderResource'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: CreateProvider
      tags:
      - ProviderService
  /v2/projects/{projectName}/providers/{resourceId}:
    delete:
      description: Delete a provider.
      operationId: ProviderService_DeleteProvider
      parameters:
      - description: Name of the provider provider to be deleted.
        in: path
        name: resourceId
        required: true
        schema:
          type: string
      - description: unique projectName for the resource
        in: path
        name: projectName
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteProviderResponse'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: DeleteProvider
      tags:
      - ProviderService
    get:
      description: Get a specific provider.
      operationId: ProviderService_GetProvider
      parameters:
      - description: Name of the requested provider.
        in: path
        name: resourceId
        required: true
        schema:
          type: string
      - description: unique projectName for the resource
        in: path
        name: projectName
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProviderResource'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: GetProvider
      tags:
      - ProviderService
    patch:
      description: Patch a provider.
      operationId: ProviderService_PatchProvider
      parameters:
      - description: ID of the resource to be updated.
        in: path
        name: resourceId
        required: true
        schema:
          type: string
      - description: Field mask to be applied on the patch of provider.
        in: query
        name: fieldMask
        schema:
          format: field-mask
          type: string
      - description: unique projectName for the resource
        in: path
        name: projectName
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProviderResource'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProviderResource'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: PatchProvider
      tags:
      - ProviderService
    put:
      description: Update a provider.
      operationId: ProviderService_UpdateProvider
      parameters:
      - description: Name of the provider provider to be updated.
        in: path
        name: resourceId
        required: true
        schema:
          type: string
      - description: unique projectName for the resource
        in: path
        name: projectName
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProviderResource'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProviderResource'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: UpdateProvider
      tags:
      - ProviderService
  /v2/projects/{projectName}/regions:
    get:
      description: Get a list of regions.
      operationId: RegionService_ListRegions
      parameters:
      - description: Optional comma separated list of fields to specify a sorting
          order. See https://google.aip.dev/132 for details.
        in: query
        name: orderBy
        schema:
          maxLength: 1000
          pattern: ^$|^[a-zA-Z-_0-9., ]+$
          type: string
      - description: Optional filter to return only item of interest. See https://google.aip.dev/160
          for details.
        in: query
        name: filter
        schema:
          maxLength: 1000
          pattern: ^$|^[a-zA-Z-_0-9.,:/=*(){}"' ]+$
          type: string
      - description: Defines the amount of items to be contained in a single page.
          Default of 20.
        in: query
        name: pageSize
        schema:
          format: int32
          maximum: 100
          minimum: 1
          type: integer
      - description: Index of the first item to return. This allows skipping items.
        in: query
        name: offset
        schema:
          format: int32
          maximum: 10000
          type: integer
      - description: Flag to signal if the total amount of site in a region should
          be returned.
        in: query
        name: showTotalSites
        schema:
          type: boolean
      - description: unique projectName for the resource
        in: path
        name: projectName
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListRegionsResponse'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: ListRegions
      tags:
      - RegionService
    post:
      description: Create a region.
      operationId: RegionService_CreateRegion
      parameters:
      - description: unique projectName for the resource
        in: path
        name: projectName
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegionResource'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegionResource'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: CreateRegion
      tags:
      - RegionService
  /v2/projects/{projectName}/regions/{resourceId}:
    delete:
      description: Delete a region.
      operationId: RegionService_DeleteRegion
      parameters:
      - description: Name of the region region to be deleted.
        in: path
        name: resourceId
        required: true
        schema:
          type: string
      - description: unique projectName for the resource
        in: path
        name: projectName
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteRegionResponse'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: DeleteRegion
      tags:
      - RegionService
    get:
      description: Get a specific region.
      operationId: RegionService_GetRegion
      parameters:
      - description: Name of the requested region.
        in: path
        name: resourceId
        required: true
        schema:
          type: string
      - description: unique projectName for the resource
        in: path
        name: projectName
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegionResource'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: GetRegion
      tags:
      - RegionService
    patch:
      description: Patch a region.
      operationId: RegionService_PatchRegion
      parameters:
      - description: ID of the resource to be updated.
        in: path
        name: resourceId
        required: true
        schema:
          type: string
      - description: Field mask to be applied on the patch of region.
        in: query
        name: fieldMask
        schema:
          format: field-mask
          type: string
      - description: unique projectName for the resource
        in: path
        name: projectName
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegionResource'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegionResource'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: PatchRegion
      tags:
      - RegionService
    put:
      description: Update a region.
      operationId: RegionService_UpdateRegion
      parameters:
      - description: Name of the region region to be updated.
        in: path
        name: resourceId
        required: true
        schema:
          type: string
      - description: unique projectName for the resource
        in: path
        name: projectName
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegionResource'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegionResource'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: UpdateRegion
      tags:
      - RegionService
  /v2/projects/{projectName}/regions/{resourceId}/sites:
    get:
      description: Get a list of sites.
      operationId: SiteService_ListSites
      parameters:
      - description: Optional comma separated list of fields to specify a sorting
          order. See https://google.aip.dev/132 for details.
        in: query
        name: orderBy
        schema:
          maxLength: 1000
          pattern: ^$|^[a-zA-Z-_0-9., ]+$
          type: string
      - description: Optional filter to return only item of interest. See https://google.aip.dev/160
          for details.
        in: query
        name: filter
        schema:
          maxLength: 1000
          pattern: ^$|^[a-zA-Z-_0-9.,:/=*(){}"' ]+$
          type: string
      - description: Defines the amount of items to be contained in a single page.
          Default of 20.
        in: query
        name: pageSize
        schema:
          format: int32
          maximum: 100
          minimum: 1
          type: integer
      - description: Index of the first item to return. This allows skipping items.
        in: query
        name: offset
        schema:
          format: int32
          maximum: 10000
          type: integer
      - description: unique projectName for the resource
        in: path
        name: projectName
        required: true
        schema:
          type: string
      - description: unique resourceId for the resource
        in: path
        name: resourceId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListSitesResponse'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: ListSites
      tags:
      - SiteService
    post:
      description: Create a site.
      operationId: SiteService_CreateSite
      parameters:
      - description: unique projectName for the resource
        in: path
        name: projectName
        required: true
        schema:
          type: string
      - description: unique resourceId for the resource
        in: path
        name: resourceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SiteResource'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SiteResource'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: CreateSite
      tags:
      - SiteService
  /v2/projects/{projectName}/regions/{resourceId}/sites/{resourceId}:
    delete:
      description: Delete a site.
      operationId: SiteService_DeleteSite
      parameters:
      - description: Name of the site site to be deleted.
        in: path
        name: resourceId
        required: true
        schema:
          type: string
      - description: unique projectName for the resource
        in: path
        name: projectName
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteSiteResponse'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: DeleteSite
      tags:
      - SiteService
    get:
      description: Get a specific site.
      operationId: SiteService_GetSite
      parameters:
      - description: Name of the requested site.
        in: path
        name: resourceId
        required: true
        schema:
          type: string
      - description: unique projectName for the resource
        in: path
        name: projectName
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SiteResource'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: GetSite
      tags:
      - SiteService
    patch:
      description: Patch a site.
      operationId: SiteService_PatchSite
      parameters:
      - description: ID of the resource to be updated.
        in: path
        name: resourceId
        required: true
        schema:
          type: string
      - description: Field mask to be applied on the patch of site.
        in: query
        name: fieldMask
        schema:
          format: field-mask
          type: string
      - description: unique projectName for the resource
        in: path
        name: projectName
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SiteResource'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SiteResource'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: PatchSite
      tags:
      - SiteService
    put:
      description: Update a site.
      operationId: SiteService_UpdateSite
      parameters:
      - description: Name of the site site to be updated.
        in: path
        name: resourceId
        required: true
        schema:
          type: string
      - description: unique projectName for the resource
        in: path
        name: projectName
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SiteResource'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SiteResource'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: UpdateSite
      tags:
      - SiteService
  /v2/projects/{projectName}/schedules/repeated:
    get:
      description: Get a list of repeatedSchedules.
      operationId: ScheduleService_ListRepeatedSchedules
      parameters:
      - description: Defines the amount of items to be contained in a single page.
          Default of 20.
        in: query
        name: pageSize
        schema:
          format: int32
          maximum: 100
          minimum: 1
          type: integer
      - description: Index of the first item to return. This allows skipping items.
        in: query
        name: offset
        schema:
          format: int32
          maximum: 10000
          type: integer
      - description: The host ID target of the schedules. If not specified, returns
          all schedules (given the other query params). If specified, returns the
          schedules that have the specified host ID applied to them, i.e., target
          including the inherited ones (parent site if not null). If null, returns
          all the schedules without a host ID as target.
        in: query
        name: hostId
        schema:
          pattern: ^host-[0-9a-f]{8}$
          type: string
      - description: The site ID target of the schedules. If not specified, returns
          all schedules (given the other query params). If specified, returns the
          schedules that have the specified site ID applied to them, i.e., target
          including the inherited ones. If null, returns all the schedules without
          a site ID as target
        in: query
        name: siteId
        schema:
          pattern: ^site-[0-9a-f]{8}$
          type: string
      - description: The region ID target of the schedules. If not specified, returns
          all schedules (given the other query params). If specified, returns the
          schedules that have the specified region ID applied to them, i.e., target
          including the inherited ones (parent region if not null). If null, returns
          all the schedules without a region ID as target.
        in: query
        name: regionId
        schema:
          pattern: ^region-[0-9a-f]{8}$
          type: string
      - description: Filter based on the timestamp, expected to be UNIX epoch UTC
          timestamp in seconds.
        in: query
        name: unixEpoch
        schema:
          pattern: ^[0-9]+$
          type: string
      - description: unique projectName for the resource
        in: path
        name: projectName
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListRepeatedSchedulesResponse'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: ListRepeatedSchedules
      tags:
      - ScheduleService
    post:
      description: Create a repeated_schedule.
      operationId: ScheduleService_CreateRepeatedSchedule
      parameters:
      - description: unique projectName for the resource
        in: path
        name: projectName
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RepeatedScheduleResource'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepeatedScheduleResource'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: CreateRepeatedSchedule
      tags:
      - ScheduleService
  /v2/projects/{projectName}/schedules/repeated/{resourceId}:
    delete:
      description: Delete a repeated_schedule.
      operationId: ScheduleService_DeleteRepeatedSchedule
      parameters:
      - description: Name of the repeated_schedule repeated_schedule to be deleted.
        in: path
        name: resourceId
        required: true
        schema:
          type: string
      - description: unique projectName for the resource
        in: path
        name: projectName
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteRepeatedScheduleResponse'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: DeleteRepeatedSchedule
      tags:
      - ScheduleService
    get:
      description: Get a specific repeated_schedule.
      operationId: ScheduleService_GetRepeatedSchedule
      parameters:
      - description: Name of the requested repeated_schedule.
        in: path
        name: resourceId
        required: true
        schema:
          type: string
      - description: unique projectName for the resource
        in: path
        name: projectName
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepeatedScheduleResource'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: GetRepeatedSchedule
      tags:
      - ScheduleService
    patch:
      description: Patch a repeated_schedule.
      operationId: ScheduleService_PatchRepeatedSchedule
      parameters:
      - description: ID of the resource to be updated.
        in: path
        name: resourceId
        required: true
        schema:
          type: string
      - description: Field mask to be applied on the patch of repeated_schedule.
        in: query
        name: fieldMask
        schema:
          format: field-mask
          type: string
      - description: unique projectName for the resource
        in: path
        name: projectName
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RepeatedScheduleResource'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepeatedScheduleResource'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: PatchRepeatedSchedule
      tags:
      - ScheduleService
    put:
      description: Update a repeated_schedule.
      operationId: ScheduleService_UpdateRepeatedSchedule
      parameters:
      - description: Name of the repeated_schedule repeated_schedule to be updated.
        in: path
        name: resourceId
        required: true
        schema:
          type: string
      - description: unique projectName for the resource
        in: path
        name: projectName
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RepeatedScheduleResource'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepeatedScheduleResource'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: UpdateRepeatedSchedule
      tags:
      - ScheduleService
  /v2/projects/{projectName}/schedules/single:
    get:
      description: Get a list of singleSchedules.
      operationId: ScheduleService_ListSingleSchedules
      parameters:
      - description: Defines the amount of items to be contained in a single page.
          Default of 20.
        in: query
        name: pageSize
        schema:
          format: int32
          maximum: 100
          minimum: 1
          type: integer
      - description: Index of the first item to return. This allows skipping items.
        in: query
        name: offset
        schema:
          format: int32
          maximum: 10000
          type: integer
      - description: The host ID target of the schedules. If not specified, returns
          all schedules (given the other query params). If specified, returns the
          schedules that have the specified host ID applied to them, i.e., target
          including the inherited ones (parent site if not null). If null, returns
          all the schedules without a host ID as target.
        in: query
        name: hostId
        schema:
          pattern: ^host-[0-9a-f]{8}$
          type: string
      - description: The site ID target of the schedules. If not specified, returns
          all schedules (given the other query params). If specified, returns the
          schedules that have the specified site ID applied to them, i.e., target
          including the inherited ones. If null, returns all the schedules without
          a site ID as target
        in: query
        name: siteId
        schema:
          pattern: ^site-[0-9a-f]{8}$
          type: string
      - description: The region ID target of the schedules. If not specified, returns
          all schedules (given the other query params). If specified, returns the
          schedules that have the specified region ID applied to them, i.e., target
          including the inherited ones (parent region if not null). If null, returns
          all the schedules without a region ID as target.
        in: query
        name: regionId
        schema:
          pattern: ^region-[0-9a-f]{8}$
          type: string
      - description: Filter based on the timestamp, expected to be UNIX epoch UTC
          timestamp in seconds.
        in: query
        name: unixEpoch
        schema:
          pattern: ^[0-9]+$
          type: string
      - description: unique projectName for the resource
        in: path
        name: projectName
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListSingleSchedulesResponse'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: ListSingleSchedules
      tags:
      - ScheduleService
    post:
      description: Create a single_schedule.
      operationId: ScheduleService_CreateSingleSchedule
      parameters:
      - description: unique projectName for the resource
        in: path
        name: projectName
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SingleScheduleResource'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SingleScheduleResource'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: CreateSingleSchedule
      tags:
      - ScheduleService
  /v2/projects/{projectName}/schedules/single/{resourceId}:
    delete:
      description: Delete a single_schedule.
      operationId: ScheduleService_DeleteSingleSchedule
      parameters:
      - description: Name of the single_schedule single_schedule to be deleted.
        in: path
        name: resourceId
        required: true
        schema:
          type: string
      - description: unique projectName for the resource
        in: path
        name: projectName
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteSingleScheduleResponse'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: DeleteSingleSchedule
      tags:
      - ScheduleService
    get:
      description: Get a specific single_schedule.
      operationId: ScheduleService_GetSingleSchedule
      parameters:
      - description: Name of the requested single_schedule.
        in: path
        name: resourceId
        required: true
        schema:
          type: string
      - description: unique projectName for the resource
        in: path
        name: projectName
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SingleScheduleResource'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: GetSingleSchedule
      tags:
      - ScheduleService
    patch:
      description: Patch a single_schedule.
      operationId: ScheduleService_PatchSingleSchedule
      parameters:
      - description: ID of the resource to be updated.
        in: path
        name: resourceId
        required: true
        schema:
          type: string
      - description: Field mask to be applied on the patch of single_schedule.
        in: query
        name: fieldMask
        schema:
          format: field-mask
          type: string
      - description: unique projectName for the resource
        in: path
        name: projectName
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SingleScheduleResource'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SingleScheduleResource'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: PatchSingleSchedule
      tags:
      - ScheduleService
    put:
      description: Update a single_schedule.
      operationId: ScheduleService_UpdateSingleSchedule
      parameters:
      - description: Name of the single_schedule single_schedule to be updated.
        in: path
        name: resourceId
        required: true
        schema:
          type: string
      - description: unique projectName for the resource
        in: path
        name: projectName
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SingleScheduleResource'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SingleScheduleResource'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: UpdateSingleSchedule
      tags:
      - ScheduleService
  /v2/projects/{projectName}/telemetry/loggroups:
    get:
      description: Get a list of telemetry_logs_groups.
      operationId: TelemetryLogsGroupService_ListTelemetryLogsGroups
      parameters:
      - description: Defines the amount of items to be contained in a single page.
          Default of 20.
        in: query
        name: pageSize
        schema:
          format: int32
          maximum: 100
          minimum: 1
          type: integer
      - description: Index of the first item to return. This allows skipping items.
        in: query
        name: offset
        schema:
          format: int32
          maximum: 10000
          type: integer
      - description: Optional comma separated list of fields to specify a sorting
          order. See https://google.aip.dev/132 for details.
        in: query
        name: orderBy
        schema:
          maxLength: 1000
          pattern: ^$|^[a-zA-Z-_0-9., ]+$
          type: string
      - description: unique projectName for the resource
        in: path
        name: projectName
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListTelemetryLogsGroupsResponse'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: ListTelemetryLogsGroups
      tags:
      - TelemetryLogsGroupService
    post:
      description: Create a telemetry_logs_group.
      operationId: TelemetryLogsGroupService_CreateTelemetryLogsGroup
      parameters:
      - description: unique projectName for the resource
        in: path
        name: projectName
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TelemetryLogsGroupResource'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TelemetryLogsGroupResource'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: CreateTelemetryLogsGroup
      tags:
      - TelemetryLogsGroupService
  /v2/projects/{projectName}/telemetry/loggroups/{resourceId}:
    delete:
      description: Delete a telemetry_logs_group.
      operationId: TelemetryLogsGroupService_DeleteTelemetryLogsGroup
      parameters:
      - description: Name of the telemetry_logs_group telemetry_logs_group to be deleted.
        in: path
        name: resourceId
        required: true
        schema:
          type: string
      - description: unique projectName for the resource
        in: path
        name: projectName
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteTelemetryLogsGroupResponse'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: DeleteTelemetryLogsGroup
      tags:
      - TelemetryLogsGroupService
    get:
      description: Get a specific telemetry_logs_group.
      operationId: TelemetryLogsGroupService_GetTelemetryLogsGroup
      parameters:
      - description: Name of the requested telemetry_logs_group.
        in: path
        name: resourceId
        required: true
        schema:
          type: string
      - description: unique projectName for the resource
        in: path
        name: projectName
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TelemetryLogsGroupResource'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: GetTelemetryLogsGroup
      tags:
      - TelemetryLogsGroupService
  /v2/projects/{projectName}/telemetry/loggroups/{resourceId}/logprofiles:
    get:
      description: Get a list of telemetryLogsProfiles.
      operationId: TelemetryLogsProfileService_ListTelemetryLogsProfiles
      parameters:
      - description: Defines the amount of items to be contained in a single page.
          Default of 20.
        in: query
        name: pageSize
        schema:
          format: int32
          maximum: 100
          minimum: 1
          type: integer
      - description: Index of the first item to return. This allows skipping items.
        in: query
        name: offset
        schema:
          format: int32
          maximum: 10000
          type: integer
      - description: Optional comma separated list of fields to specify a sorting
          order. See https://google.aip.dev/132 for details.
        in: query
        name: orderBy
        schema:
          maxLength: 1000
          pattern: ^$|^[a-zA-Z-_0-9., ]+$
          type: string
      - description: Returns only the telemetry profiles that are assigned with the
          given instance identifier.
        in: query
        name: instanceId
        schema:
          pattern: ^inst-[0-9a-f]{8}$
          type: string
      - description: Returns only the telemetry profiles that are assigned with the
          given siteID.
        in: query
        name: siteId
        schema:
          pattern: ^site-[0-9a-f]{8}$
          type: string
      - description: Returns only the telemetry profiles that are assigned with the
          given regionID.
        in: query
        name: regionId
        schema:
          pattern: ^region-[0-9a-f]{8}$
          type: string
      - description: Indicates if listed telemetry profiles should be extended with
          telemetry profiles rendered from hierarchy. This flag is only used along
          with one of siteId, regionId or instanceId. If siteId, regionId or instanceId
          are not set, this flag is ignored.
        in: query
        name: showInherited
        schema:
          type: boolean
      - description: unique projectName for the resource
        in: path
        name: projectName
        required: true
        schema:
          type: string
      - description: unique resourceId for the resource
        in: path
        name: resourceId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListTelemetryLogsProfilesResponse'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: ListTelemetryLogsProfiles
      tags:
      - TelemetryLogsProfileService
    post:
      description: Create a telemetry_logs_profile.
      operationId: TelemetryLogsProfileService_CreateTelemetryLogsProfile
      parameters:
      - description: unique projectName for the resource
        in: path
        name: projectName
        required: true
        schema:
          type: string
      - description: unique resourceId for the resource
        in: path
        name: resourceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TelemetryLogsProfileResource'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TelemetryLogsProfileResource'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: CreateTelemetryLogsProfile
      tags:
      - TelemetryLogsProfileService
  /v2/projects/{projectName}/telemetry/loggroups/{resourceId}/logprofiles/{resourceId}:
    delete:
      description: Delete a telemetry_logs_profile.
      operationId: TelemetryLogsProfileService_DeleteTelemetryLogsProfile
      parameters:
      - description: Name of the telemetry_logs_profile telemetry_logs_profile to
          be deleted.
        in: path
        name: resourceId
        required: true
        schema:
          type: string
      - description: unique projectName for the resource
        in: path
        name: projectName
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteTelemetryLogsProfileResponse'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: DeleteTelemetryLogsProfile
      tags:
      - TelemetryLogsProfileService
    get:
      description: Get a specific telemetry_logs_profile.
      operationId: TelemetryLogsProfileService_GetTelemetryLogsProfile
      parameters:
      - description: Name of the requested telemetry_logs_profile.
        in: path
        name: resourceId
        required: true
        schema:
          type: string
      - description: unique projectName for the resource
        in: path
        name: projectName
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TelemetryLogsProfileResource'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: GetTelemetryLogsProfile
      tags:
      - TelemetryLogsProfileService
    patch:
      description: Patch a telemetry_logs_profile.
      operationId: TelemetryLogsProfileService_PatchTelemetryLogsProfile
      parameters:
      - description: ID of the resource to be updated.
        in: path
        name: resourceId
        required: true
        schema:
          type: string
      - description: Field mask to be applied on the patch of telemetry_logs_profile.
        in: query
        name: fieldMask
        schema:
          format: field-mask
          type: string
      - description: unique projectName for the resource
        in: path
        name: projectName
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TelemetryLogsProfileResource'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TelemetryLogsProfileResource'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: PatchTelemetryLogsProfile
      tags:
      - TelemetryLogsProfileService
    put:
      description: Update a telemetry_logs_profile.
      operationId: TelemetryLogsProfileService_UpdateTelemetryLogsProfile
      parameters:
      - description: Name of the telemetry_logs_profile telemetry_logs_profile to
          be updated.
        in: path
        name: resourceId
        required: true
        schema:
          type: string
      - description: unique projectName for the resource
        in: path
        name: projectName
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TelemetryLogsProfileResource'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TelemetryLogsProfileResource'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: UpdateTelemetryLogsProfile
      tags:
      - TelemetryLogsProfileService
  /v2/projects/{projectName}/telemetry/metricgroups:
    get:
      description: Get a list of telemetryMetricsGroups.
      operationId: TelemetryMetricsGroupService_ListTelemetryMetricsGroups
      parameters:
      - description: Defines the amount of items to be contained in a single page.
          Default of 20.
        in: query
        name: pageSize
        schema:
          format: int32
          maximum: 100
          minimum: 1
          type: integer
      - description: Index of the first item to return. This allows skipping items.
        in: query
        name: offset
        schema:
          format: int32
          maximum: 10000
          type: integer
      - description: Optional comma separated list of fields to specify a sorting
          order. See https://google.aip.dev/132 for details.
        in: query
        name: orderBy
        schema:
          maxLength: 1000
          pattern: ^$|^[a-zA-Z-_0-9., ]+$
          type: string
      - description: unique projectName for the resource
        in: path
        name: projectName
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListTelemetryMetricsGroupsResponse'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: ListTelemetryMetricsGroups
      tags:
      - TelemetryMetricsGroupService
    post:
      description: Create a telemetry_metrics_group.
      operationId: TelemetryMetricsGroupService_CreateTelemetryMetricsGroup
      parameters:
      - description: unique projectName for the resource
        in: path
        name: projectName
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TelemetryMetricsGroupResource'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TelemetryMetricsGroupResource'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: CreateTelemetryMetricsGroup
      tags:
      - TelemetryMetricsGroupService
  /v2/projects/{projectName}/telemetry/metricgroups/{resourceId}:
    delete:
      description: Delete a telemetry_metrics_group.
      operationId: TelemetryMetricsGroupService_DeleteTelemetryMetricsGroup
      parameters:
      - description: Name of the telemetry_metrics_group telemetry_metrics_group to
          be deleted.
        in: path
        name: resourceId
        required: true
        schema:
          type: string
      - description: unique projectName for the resource
        in: path
        name: projectName
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteTelemetryMetricsGroupResponse'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: DeleteTelemetryMetricsGroup
      tags:
      - TelemetryMetricsGroupService
    get:
      description: Get a specific telemetry_metrics_group.
      operationId: TelemetryMetricsGroupService_GetTelemetryMetricsGroup
      parameters:
      - description: Name of the requested telemetry_metrics_group.
        in: path
        name: resourceId
        required: true
        schema:
          type: string
      - description: unique projectName for the resource
        in: path
        name: projectName
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TelemetryMetricsGroupResource'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: GetTelemetryMetricsGroup
      tags:
      - TelemetryMetricsGroupService
  /v2/projects/{projectName}/telemetry/metricgroups/{resourceId}/metricprofiles:
    get:
      description: Get a list of telemetryMetricsProfiles.
      operationId: TelemetryMetricsProfileService_ListTelemetryMetricsProfiles
      parameters:
      - description: Defines the amount of items to be contained in a single page.
          Default of 20.
        in: query
        name: pageSize
        schema:
          format: int32
          maximum: 100
          minimum: 1
          type: integer
      - description: Index of the first item to return. This allows skipping items.
        in: query
        name: offset
        schema:
          format: int32
          maximum: 10000
          type: integer
      - description: Optional comma separated list of fields to specify a sorting
          order. See https://google.aip.dev/132 for details.
        in: query
        name: orderBy
        schema:
          maxLength: 1000
          pattern: ^$|^[a-zA-Z-_0-9., ]+$
          type: string
      - description: Returns only the telemetry profiles that are assigned with the
          given instance identifier.
        in: query
        name: instanceId
        schema:
          pattern: ^inst-[0-9a-f]{8}$
          type: string
      - description: Returns only the telemetry profiles that are assigned with the
          given siteID.
        in: query
        name: siteId
        schema:
          pattern: ^site-[0-9a-f]{8}$
          type: string
      - description: Returns only the telemetry profiles that are assigned with the
          given regionID.
        in: query
        name: regionId
        schema:
          pattern: ^region-[0-9a-f]{8}$
          type: string
      - description: Indicates if listed telemetry profiles should be extended with
          telemetry profiles rendered from hierarchy. This flag is only used along
          with one of siteId, regionId or instanceId. If siteId, regionId or instanceId
          are not set, this flag is ignored.
        in: query
        name: showInherited
        schema:
          type: boolean
      - description: unique projectName for the resource
        in: path
        name: projectName
        required: true
        schema:
          type: string
      - description: unique resourceId for the resource
        in: path
        name: resourceId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListTelemetryMetricsProfilesResponse'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: ListTelemetryMetricsProfiles
      tags:
      - TelemetryMetricsProfileService
    post:
      description: Create a telemetry_metrics_profile.
      operationId: TelemetryMetricsProfileService_CreateTelemetryMetricsProfile
      parameters:
      - description: unique projectName for the resource
        in: path
        name: projectName
        required: true
        schema:
          type: string
      - description: unique resourceId for the resource
        in: path
        name: resourceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TelemetryMetricsProfileResource'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TelemetryMetricsProfileResource'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: CreateTelemetryMetricsProfile
      tags:
      - TelemetryMetricsProfileService
  /v2/projects/{projectName}/telemetry/metricgroups/{resourceId}/metricprofiles/{resourceId}:
    delete:
      description: Delete a telemetry_metrics_profile.
      operationId: TelemetryMetricsProfileService_DeleteTelemetryMetricsProfile
      parameters:
      - description: Name of the telemetry_metrics_profile telemetry_metrics_profile
          to be deleted.
        in: path
        name: resourceId
        required: true
        schema:
          type: string
      - description: unique projectName for the resource
        in: path
        name: projectName
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteTelemetryMetricsProfileResponse'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: DeleteTelemetryMetricsProfile
      tags:
      - TelemetryMetricsProfileService
    get:
      description: Get a specific telemetry_metrics_profile.
      operationId: TelemetryMetricsProfileService_GetTelemetryMetricsProfile
      parameters:
      - description: Name of the requested telemetry_metrics_profile.
        in: path
        name: resourceId
        required: true
        schema:
          type: string
      - description: unique projectName for the resource
        in: path
        name: projectName
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TelemetryMetricsProfileResource'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: GetTelemetryMetricsProfile
      tags:
      - TelemetryMetricsProfileService
    patch:
      description: Patch a telemetry_metrics_profile.
      operationId: TelemetryMetricsProfileService_PatchTelemetryMetricsProfile
      parameters:
      - description: ID of the resource to be updated.
        in: path
        name: resourceId
        required: true
        schema:
          type: string
      - description: Field mask to be applied on the patch of telemetry_metrics_profile.
        in: query
        name: fieldMask
        schema:
          format: field-mask
          type: string
      - description: unique projectName for the resource
        in: path
        name: projectName
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TelemetryMetricsProfileResource'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TelemetryMetricsProfileResource'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: PatchTelemetryMetricsProfile
      tags:
      - TelemetryMetricsProfileService
    put:
      description: Update a telemetry_metrics_profile.
      operationId: TelemetryMetricsProfileService_UpdateTelemetryMetricsProfile
      parameters:
      - description: Name of the telemetry_metrics_profile telemetry_metrics_profile
          to be updated.
        in: path
        name: resourceId
        required: true
        schema:
          type: string
      - description: unique projectName for the resource
        in: path
        name: projectName
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TelemetryMetricsProfileResource'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TelemetryMetricsProfileResource'
          description: OK
        default:
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Status'
          description: Default error response
      summary: UpdateTelemetryMetricsProfile
      tags:
      - TelemetryMetricsProfileService
components:
  schemas:
    DeleteHostResponse:
      description: Reponse message for DeleteHost.
      type: object
    DeleteInstanceResponse:
      description: Response message for DeleteInstance.
      type: object
    DeleteLocalAccountResponse:
      description: Response message for DeleteLocalAccount.
      type: object
    DeleteOperatingSystemResponse:
      description: Response message for DeleteOperatingSystem.
      type: object
    DeleteProviderResponse:
      description: Response message for DeleteProvider.
      type: object
    DeleteRegionResponse:
      description: Response message for DeleteRegion.
      type: object
    DeleteRepeatedScheduleResponse:
      description: Response message for DeleteRepeatedSchedule.
      type: object
    DeleteSingleScheduleResponse:
      description: Response message for DeleteSingleSchedule.
      type: object
    DeleteSiteResponse:
      description: Response message for DeleteSite.
      type: object
    DeleteTelemetryLogsGroupResponse:
      description: Response message for DeleteTelemetryLogsGroup.
      type: object
    DeleteTelemetryLogsProfileResponse:
      description: Response message for DeleteTelemetryLogsProfile.
      type: object
    DeleteTelemetryMetricsGroupResponse:
      description: Response message for DeleteTelemetryMetricsGroup.
      type: object
    DeleteTelemetryMetricsProfileResponse:
      description: Response message for DeleteTelemetryMetricsProfile.
      type: object
    DeleteWorkloadMemberResponse:
      description: Response message for DeleteWorkloadMember.
      type: object
    DeleteWorkloadResponse:
      description: Response message for DeleteWorkload.
      type: object
    GetHostSummaryResponse:
      description: Summary of the hosts status.
      properties:
        error:
          description: The total number of hosts presenting an Error.
          format: uint32
          readOnly: true
          type: integer
        running:
          description: The total number of hosts in Running state.
          format: uint32
          readOnly: true
          type: integer
        total:
          description: The total number of hosts.
          format: uint32
          readOnly: true
          type: integer
        unallocated:
          description: The total number of hosts without a site.
          format: uint32
          readOnly: true
          type: integer
      type: object
    GoogleProtobufAny:
      additionalProperties: true
      description: Contains an arbitrary serialized message along with a @type that
        describes the type of the serialized message.
      properties:
        '@type':
          description: The type of the serialized message.
          type: string
      type: object
    HostRegister:
      description: Message to register a Host.
      properties:
        autoOnboard:
          description: Flag ot signal to automatically onboard the host.
          type: boolean
        name:
          description: The host name.
          maxLength: 20
          pattern: '^$|^[a-zA-Z-_0-9./: ]+$'
          type: string
        serialNumber:
          description: The host serial number.
          pattern: ^([A-Za-z0-9]{5,20})?$
          type: string
        uuid:
          description: The host UUID.
          type: string
      type: object
    HostResource:
      description: A Host resource.
      properties:
        biosReleaseDate:
          description: BIOS Release Date.
          readOnly: true
          type: string
        biosVendor:
          description: BIOS Vendor.
          readOnly: true
          type: string
        biosVersion:
          description: BIOS Version.
          readOnly: true
          type: string
        bmcIp:
          description: BMC IP address, such as "192.0.0.1".
          readOnly: true
          type: string
        bmcKind:
          description: Kind of BMC.
          enum:
          - BAREMETAL_CONTROLLER_KIND_NONE
          - BAREMETAL_CONTROLLER_KIND_IPMI
          - BAREMETAL_CONTROLLER_KIND_VPRO
          - BAREMETAL_CONTROLLER_KIND_PDU
          format: enum
          readOnly: true
          type: string
        cpuArchitecture:
          description: Architecture of the CPU model, e.g. x86_64.
          readOnly: true
          type: string
        cpuCapabilities:
          description: String list of all CPU capabilities (possibly JSON).
          readOnly: true
          type: string
        cpuCores:
          description: Number of CPU cores.
          format: uint32
          readOnly: true
          type: integer
        cpuModel:
          description: CPU model of the Host.
          readOnly: true
          type: string
        cpuSockets:
          description: Number of physical CPU sockets.
          format: uint32
          readOnly: true
          type: integer
        cpuThreads:
          description: Total Number of threads supported by the CPU.
          format: uint32
          readOnly: true
          type: integer
        cpuTopology:
          description: JSON field storing the CPU topology, refer to HDA/HRM docs
            for the JSON schema.
          readOnly: true
          type: string
        createdAt:
          description: Timestamp for the creation of the resource.
          readOnly: true
          type: string
        currentState:
          description: The current state of the Host.
          enum:
          - HOST_STATE_DELETING
          - HOST_STATE_DELETED
          - HOST_STATE_ONBOARDED
          - HOST_STATE_UNTRUSTED
          - HOST_STATE_REGISTERED
          format: enum
          readOnly: true
          type: string
        desiredState:
          description: The desired state of the Host.
          enum:
          - HOST_STATE_DELETING
          - HOST_STATE_DELETED
          - HOST_STATE_ONBOARDED
          - HOST_STATE_UNTRUSTED
          - HOST_STATE_REGISTERED
          format: enum
          readOnly: true
          type: string
        hostGpus:
          description: Back-reference to attached host GPU resources.
          items:
            $ref: '#/components/schemas/HostgpuResource'
          readOnly: true
          type: array
        hostId:
          description: Resource ID, generated on Create.
          pattern: ^host-[0-9a-f]{8}$
          readOnly: true
          type: string
        hostNics:
          description: Back-reference to attached host NIC resources.
          items:
            $ref: '#/components/schemas/HostnicResource'
          readOnly: true
          type: array
        hostStatus:
          description: textual message that describes the runtime status of Host.
            Set by RMs only.
          type: string
        hostStatusIndicator:
          description: Indicates interpretation of host_status. Set by RMs only.
          enum:
          - STATUS_INDICATION_ERROR
          - STATUS_INDICATION_IN_PROGRESS
          - STATUS_INDICATION_IDLE
          format: enum
          type: string
        hostStatusTimestamp:
          description: UTC timestamp when host_status was last changed. Set by RMs
            only.
          type: string
        hostStorages:
          description: Back-reference to attached host storage resources.
          items:
            $ref: '#/components/schemas/HoststorageResource'
          readOnly: true
          type: array
        hostUsbs:
          description: Back-reference to attached host USB resources.
          items:
            $ref: '#/components/schemas/HostusbResource'
          readOnly: true
          type: array
        hostname:
          description: Hostname.
          readOnly: true
          type: string
        inheritedMetadata:
          description: The metadata inherited by the host, represented by a list of
            key:value pairs, rendered by location and logical structures.
          items:
            $ref: '#/components/schemas/MetadataItem'
          readOnly: true
          type: array
        instance:
          $ref: '#/components/schemas/InstanceResource'
        memoryBytes:
          description: Quantity of memory (RAM) in the system in bytes.
          readOnly: true
          type: string
        metadata:
          description: The metadata associated with the host, represented by a list
            of key:value pairs.
          items:
            $ref: '#/components/schemas/MetadataItem'
          type: array
        name:
          description: The host name.
          maxLength: 50
          pattern: '^$|^[a-zA-Z-_0-9./: ]+$'
          type: string
        note:
          description: The note associated with the host.
          maxLength: 512
          minLength: 1
          pattern: ^$|^[a-zA-Z-_0-9./:;=@?!#,<>*()" ]+$
          readOnly: true
          type: string
        onboardingStatus:
          description: textual message that describes the onboarding status of Host.
            Set by RMs only.
          type: string
        onboardingStatusIndicator:
          description: Indicates interpretation of onboarding_status. Set by RMs only.
          enum:
          - STATUS_INDICATION_ERROR
          - STATUS_INDICATION_IN_PROGRESS
          - STATUS_INDICATION_IDLE
          format: enum
          type: string
        onboardingStatusTimestamp:
          description: UTC timestamp when onboarding_status was last changed. Set
            by RMs only.
          type: string
        productName:
          description: System Product Name.
          readOnly: true
          type: string
        registrationStatus:
          description: textual message that describes the onboarding status of Host.
            Set by RMs only.
          type: string
        registrationStatusIndicator:
          description: Indicates interpretation of registration_status. Set by RMs
            only.
          enum:
          - STATUS_INDICATION_ERROR
          - STATUS_INDICATION_IN_PROGRESS
          - STATUS_INDICATION_IDLE
          format: enum
          type: string
        registrationStatusTimestamp:
          description: UTC timestamp when registration_status was last changed. Set
            by RMs only.
          type: string
        resourceId:
          description: Resource ID, generated on Create.
          pattern: ^host-[0-9a-f]{8}$
          readOnly: true
          type: string
        serialNumber:
          description: SMBIOS device serial number.
          readOnly: true
          type: string
        site:
          $ref: '#/components/schemas/SiteResource'
        siteId:
          description: The site where the host is located.
          pattern: ^$|^site-[0-9a-f]{8}$
          type: string
          writeOnly: true
        updatedAt:
          description: Timestamp for the last update of the resource.
          readOnly: true
          type: string
        uuid:
          description: The host UUID identifier; UUID is unique and immutable.
          type: string
      required:
      - name
      type: object
    HostgpuResource:
      description: The set of available host GPU cards.
      properties:
        createdAt:
          description: Timestamp for the creation of the resource.
          readOnly: true
          type: string
        description:
          description: The human-readable GPU device description.
          readOnly: true
          type: string
        deviceName:
          description: GPU name as reported by OS.
          readOnly: true
          type: string
        features:
          description: The features of this GPU device, comma separated.
          readOnly: true
          type: string
        pciId:
          description: The GPU device PCI identifier.
          readOnly: true
          type: string
        product:
          description: The GPU device model.
          readOnly: true
          type: string
        resourceId:
          pattern: ^hostgpu-[0-9a-f]{8}$
          readOnly: true
          type: string
        updatedAt:
          description: Timestamp for the last update of the resource.
          readOnly: true
          type: string
        vendor:
          description: The GPU device vendor.
          readOnly: true
          type: string
      type: object
    HostnicResource:
      description: The set of available host interfaces.
      properties:
        bmcInterface:
          description: Whether this is a bmc interface or not.
          readOnly: true
          type: boolean
        createdAt:
          description: Timestamp for the creation of the resource.
          readOnly: true
          type: string
        deviceName:
          description: The device name (OS provided, like eth0, enp1s0, etc.).
          readOnly: true
          type: string
        features:
          description: The features of this interface, comma separated.
          readOnly: true
          type: string
        linkState:
          description: Link state of this interface.
          enum:
          - NETWORK_INTERFACE_LINK_STATE_UP
          - NETWORK_INTERFACE_LINK_STATE_DOWN
          format: enum
          readOnly: true
          type: string
        macAddr:
          description: The interface MAC address.
          readOnly: true
          type: string
        mtu:
          description: Maximum transmission unit of the interface.
          format: uint32
          readOnly: true
          type: integer
        pciIdentifier:
          description: PCI identifier string for this network interface.
          readOnly: true
          type: string
        resourceId:
          pattern: ^hostnic-[0-9a-f]{8}$
          readOnly: true
          type: string
        sriovEnabled:
          description: If the interface has SRIOV enabled.
          readOnly: true
          type: boolean
        sriovVfsNum:
          description: The number of VFs currently provisioned on the interface, if
            SR-IOV is supported.
          format: uint32
          readOnly: true
          type: integer
        sriovVfsTotal:
          description: The maximum number of VFs the interface supports, if SR-IOV
            is supported.
          format: uint32
          readOnly: true
          type: integer
        updatedAt:
          description: Timestamp for the last update of the resource.
          readOnly: true
          type: string
      type: object
    HoststorageResource:
      description: The set of available host storage capabilities.
      properties:
        capacityBytes:
          description: The storage device Capacity (size) in bytes.
          readOnly: true
          type: string
        createdAt:
          description: Timestamp for the creation of the resource.
          readOnly: true
          type: string
        deviceName:
          description: The storage device device name (OS provided, like sda, sdb,
            etc.)
          readOnly: true
          type: string
        model:
          description: The storage device model.
          readOnly: true
          type: string
        resourceId:
          pattern: ^hoststorage-[0-9a-f]{8}$
          readOnly: true
          type: string
        serial:
          description: The storage device unique serial number.
          readOnly: true
          type: string
        updatedAt:
          description: Timestamp for the last update of the resource.
          readOnly: true
          type: string
        vendor:
          description: The Storage device vendor.
          readOnly: true
          type: string
        wwid:
          description: The storage device unique identifier.
          readOnly: true
          type: string
      type: object
    HostusbResource:
      description: The set of host USB resources.
      properties:
        addr:
          description: USB Device number assigned by OS.
          format: uint32
          readOnly: true
          type: integer
        bus:
          description: Bus number of device connected with.
          format: uint32
          readOnly: true
          type: integer
        class:
          description: class defined by USB-IF.
          readOnly: true
          type: string
        createdAt:
          description: Timestamp for the creation of the resource.
          readOnly: true
          type: string
        deviceName:
          description: the OS-provided device name.
          readOnly: true
          type: string
        idproduct:
          description: Hexadecimal number representing ID of the USB device product.
          readOnly: true
          type: string
        idvendor:
          description: Hexadecimal number representing ID of the USB device vendor.
          readOnly: true
          type: string
        resourceId:
          pattern: ^hostusb-[0-9a-f]{8}$
          readOnly: true
          type: string
        serial:
          description: Serial number of device.
          readOnly: true
          type: string
        updatedAt:
          description: Timestamp for the last update of the resource.
          readOnly: true
          type: string
      type: object
    InstanceResource:
      description: InstanceResource describes an instantiated OS install, running
        on either a host or hypervisor.
      properties:
        createdAt:
          description: Timestamp for the creation of the resource.
          readOnly: true
          type: string
        currentOs:
          $ref: '#/components/schemas/OperatingSystemResource'
        currentState:
          description: The Instance current state.
          enum:
          - INSTANCE_STATE_RUNNING
          - INSTANCE_STATE_DELETED
          - INSTANCE_STATE_UNTRUSTED
          format: enum
          readOnly: true
          type: string
        desiredOs:
          $ref: '#/components/schemas/OperatingSystemResource'
        desiredState:
          description: The Instance desired state.
          enum:
          - INSTANCE_STATE_RUNNING
          - INSTANCE_STATE_DELETED
          - INSTANCE_STATE_UNTRUSTED
          format: enum
          readOnly: true
          type: string
        host:
          $ref: '#/components/schemas/HostResource'
        hostId:
          description: The host's unique identifier associated with the instance.
          pattern: ^host-[0-9a-f]{8}$
          type: string
          writeOnly: true
        instanceId:
          description: The instance's unique identifier. Alias of resourceID.
          pattern: ^inst-[0-9a-f]{8}$
          readOnly: true
          type: string
        instanceStatus:
          description: textual message that describes the current instance status.
            Set by RMs only.
          readOnly: true
          type: string
        instanceStatusIndicator:
          description: Indicates interpretation of instance_status. Set by RMs only.
          enum:
          - STATUS_INDICATION_ERROR
          - STATUS_INDICATION_IN_PROGRESS
          - STATUS_INDICATION_IDLE
          format: enum
          readOnly: true
          type: string
        instanceStatusTimestamp:
          description: UTC timestamp when instance_status was last changed. Set by
            RMs only.
          readOnly: true
          type: string
        kind:
          description: Kind of resource. Frequently tied to Provider.
          enum:
          - INSTANCE_KIND_METAL
          format: enum
          type: string
        localAccountId:
          description: The unique identifier of local account will be associated with
            the instance.
          pattern: ^localaccount-[0-9a-f]{8}$
          type: string
          writeOnly: true
        localaccount:
          $ref: '#/components/schemas/LocalAccountResource'
        name:
          description: The instance's human-readable name.
          maxLength: 50
          pattern: '^$|^[a-zA-Z-_0-9./: ]+$'
          type: string
        osId:
          description: The unique identifier of OS resource that must be installed
            on the instance.
          pattern: ^os-[0-9a-f]{8}$
          type: string
          writeOnly: true
        provisioningStatus:
          description: textual message that describes the provisioning status of Instance.
            Set by RMs only.
          readOnly: true
          type: string
        provisioningStatusIndicator:
          description: Indicates interpretation of provisioning_status. Set by RMs
            only.
          enum:
          - STATUS_INDICATION_ERROR
          - STATUS_INDICATION_IN_PROGRESS
          - STATUS_INDICATION_IDLE
          format: enum
          readOnly: true
          type: string
        provisioningStatusTimestamp:
          description: UTC timestamp when provisioning_status was last changed. Set
            by RMs only.
          readOnly: true
          type: string
        resourceId:
          description: Resource ID, generated on Create.
          pattern: ^inst-[0-9a-f]{8}$
          readOnly: true
          type: string
        securityFeature:
          description: Select to enable security features such as Secure Boot (SB)
            and Full Disk Encryption (FDE).
          enum:
          - SECURITY_FEATURE_NONE
          - SECURITY_FEATURE_SECURE_BOOT_AND_FULL_DISK_ENCRYPTION
          format: enum
          type: string
        trustedAttestationStatus:
          description: textual message that describes the trusted_attestation status
            of Instance. Set by RMs only.
          readOnly: true
          type: string
        trustedAttestationStatusIndicator:
          description: Indicates interpretation of trusted_attestation_status. Set
            by RMs only.
          enum:
          - STATUS_INDICATION_ERROR
          - STATUS_INDICATION_IN_PROGRESS
          - STATUS_INDICATION_IDLE
          format: enum
          readOnly: true
          type: string
        trustedAttestationStatusTimestamp:
          description: UTC timestamp when trusted_attestation_status was last changed.
            Set by RMs only.
          readOnly: true
          type: string
        updateStatus:
          description: textual message that describes the update status of Instance.
            Set by RMs only.
          readOnly: true
          type: string
        updateStatusDetail:
          description: JSON field storing details of Instance update status. Set by
            RMs only. Beta, subject to change.
          readOnly: true
          type: string
        updateStatusIndicator:
          description: Indicates interpretation of update_status. Set by RMs only.
          enum:
          - STATUS_INDICATION_ERROR
          - STATUS_INDICATION_IN_PROGRESS
          - STATUS_INDICATION_IDLE
          format: enum
          readOnly: true
          type: string
        updateStatusTimestamp:
          description: UTC timestamp when update_status was last changed. Set by RMs
            only.
          readOnly: true
          type: string
        updatedAt:
          description: Timestamp for the last update of the resource.
          readOnly: true
          type: string
        workloadMembers:
          description: The workload members associated with the instance.
          items:
            $ref: '#/components/schemas/WorkloadMember'
          readOnly: true
          type: array
      type: object
    InvalidateHostResponse:
      description: Response message for InvalidateHost.
      type: object
    InvalidateInstanceResponse:
      description: Response message for Invalidate Instance.
      type: object
    ListHostsResponse:
      description: Response message for the ListHosts method.
      properties:
        hasNext:
          description: Inform if there are more elements
          type: boolean
        hosts:
          description: Sorted and filtered list of hosts.
          items:
            $ref: '#/components/schemas/HostResource'
          type: array
        totalElements:
          description: Count of items in the entire list, regardless of pagination.
          format: int32
          type: integer
      required:
      - hosts
      - totalElements
      - hasNext
      type: object
    ListInstancesResponse:
      description: Response message for the ListInstances method.
      properties:
        hasNext:
          description: Inform if there are more elements
          type: boolean
        instances:
          description: Sorted and filtered list of instances.
          items:
            $ref: '#/components/schemas/InstanceResource'
          type: array
        totalElements:
          description: Count of items in the entire list, regardless of pagination.
          format: int32
          type: integer
      required:
      - instances
      - totalElements
      - hasNext
      type: object
    ListLocalAccountsResponse:
      description: Response message for the ListLocalAccounts method.
      properties:
        hasNext:
          description: Inform if there are more elements
          type: boolean
        localAccounts:
          description: Sorted and filtered list of localaccounts.
          items:
            $ref: '#/components/schemas/LocalAccountResource'
          type: array
        totalElements:
          description: Count of items in the entire list, regardless of pagination.
          format: int32
          type: integer
      required:
      - localAccounts
      - totalElements
      - hasNext
      type: object
    ListLocationsResponse:
      description: Response message for the ListLocations method.
      properties:
        nodes:
          description: Sorted and filtered list of regions.
          items:
            $ref: '#/components/schemas/ListLocationsResponse_LocationNode'
          type: array
        outputElements:
          description: Amount of items in the returned list.
          format: int32
          type: integer
        totalElements:
          description: Count of items in the entire list, regardless of pagination.
          format: int32
          type: integer
      required:
      - nodes
      type: object
    ListLocationsResponse_LocationNode:
      description: A node in the location tree.
      properties:
        name:
          description: The node human readable name.
          type: string
        parentId:
          description: The associated resource ID, of the parent resource of this
            Location node. In the case of a region, it could be empty or a regionId.
            In the case of a site, it could be empty or a regionId.
          type: string
        resourceId:
          description: The associated node resource ID, generated by inventory on
            Create.
          type: string
        type:
          description: The node type
          enum:
          - RESOURCE_KIND_REGION
          - RESOURCE_KIND_SITE
          format: enum
          type: string
      required:
      - resourceId
      - parentId
      - name
      - type
      type: object
    ListOperatingSystemsResponse:
      description: Response message for the ListOperatingSystems method.
      properties:
        hasNext:
          description: Inform if there are more elements
          type: boolean
        operatingSystems:
          description: Sorted and filtered list of oss.
          items:
            $ref: '#/components/schemas/OperatingSystemResource'
          type: array
        totalElements:
          description: Count of items in the entire list, regardless of pagination.
          format: int32
          type: integer
      required:
      - operatingSystems
      - totalElements
      - hasNext
      type: object
    ListProvidersResponse:
      description: Response message for the ListProviders method.
      properties:
        hasNext:
          description: Inform if there are more elements
          type: boolean
        providers:
          description: Sorted and filtered list of providers.
          items:
            $ref: '#/components/schemas/ProviderResource'
          type: array
        totalElements:
          description: Count of items in the entire list, regardless of pagination.
          format: int32
          type: integer
      required:
      - providers
      - totalElements
      - hasNext
      type: object
    ListRegionsResponse:
      description: Response message for the ListRegions method.
      properties:
        hasNext:
          description: Inform if there are more elements
          type: boolean
        regions:
          description: Sorted and filtered list of regions.
          items:
            $ref: '#/components/schemas/RegionResource'
          type: array
        totalElements:
          description: Count of items in the entire list, regardless of pagination.
          format: int32
          type: integer
      required:
      - regions
      - totalElements
      - hasNext
      type: object
    ListRepeatedSchedulesResponse:
      description: Response message for the ListRepeatedSchedules method.
      properties:
        hasNext:
          description: Inform if there are more elements
          type: boolean
        repeatedSchedules:
          description: Sorted and filtered list of repeated_schedules.
          items:
            $ref: '#/components/schemas/RepeatedScheduleResource'
          type: array
        totalElements:
          description: Count of items in the entire list, regardless of pagination.
          format: int32
          type: integer
      required:
      - repeatedSchedules
      - totalElements
      - hasNext
      type: object
    ListSchedulesResponse:
      description: Response message for the ListSchedulesResponse method.
      properties:
        hasNext:
          description: Inform if there are more elements
          type: boolean
        repeatedSchedules:
          description: Sorted and filtered list of repeated_schedules.
          items:
            $ref: '#/components/schemas/RepeatedScheduleResource'
          type: array
        singleSchedules:
          description: Sorted and filtered list of single_schedules.
          items:
            $ref: '#/components/schemas/SingleScheduleResource'
          type: array
        totalElements:
          description: Count of items in the entire list, regardless of pagination.
          format: int32
          type: integer
      required:
      - singleSchedules
      - repeatedSchedules
      - totalElements
      - hasNext
      type: object
    ListSingleSchedulesResponse:
      description: Response message for the ListSingleSchedules method.
      properties:
        hasNext:
          description: Inform if there are more elements
          type: boolean
        singleSchedules:
          description: Sorted and filtered list of single_schedules.
          items:
            $ref: '#/components/schemas/SingleScheduleResource'
          type: array
        totalElements:
          description: Count of items in the entire list, regardless of pagination.
          format: int32
          type: integer
      required:
      - singleSchedules
      - totalElements
      - hasNext
      type: object
    ListSitesResponse:
      description: Response message for the ListSites method.
      properties:
        hasNext:
          description: Inform if there are more elements
          type: boolean
        sites:
          description: Sorted and filtered list of sites.
          items:
            $ref: '#/components/schemas/SiteResource'
          type: array
        totalElements:
          description: Count of items in the entire list, regardless of pagination.
          format: int32
          type: integer
      required:
      - sites
      - totalElements
      - hasNext
      type: object
    ListTelemetryLogsGroupsResponse:
      description: Response message for the ListTelemetryLogsGroups method.
      properties:
        hasNext:
          description: Inform if there are more elements
          type: boolean
        telemetryLogsGroups:
          description: Sorted and filtered list of telemetry_logs_groups.
          items:
            $ref: '#/components/schemas/TelemetryLogsGroupResource'
          type: array
        totalElements:
          description: Count of items in the entire list, regardless of pagination.
          format: int32
          type: integer
      required:
      - telemetryLogsGroups
      - totalElements
      - hasNext
      type: object
    ListTelemetryLogsProfilesResponse:
      description: Response message for the ListTelemetryLogsProfiles method.
      properties:
        hasNext:
          description: Inform if there are more elements
          type: boolean
        telemetryLogsProfiles:
          description: Sorted and filtered list of telemetry_logs_profiles.
          items:
            $ref: '#/components/schemas/TelemetryLogsProfileResource'
          type: array
        totalElements:
          description: Count of items in the entire list, regardless of pagination.
          format: int32
          type: integer
      required:
      - telemetryLogsProfiles
      - totalElements
      - hasNext
      type: object
    ListTelemetryMetricsGroupsResponse:
      description: Response message for the ListTelemetryMetricsGroups method.
      properties:
        hasNext:
          description: Inform if there are more elements
          type: boolean
        telemetryMetricsGroups:
          description: Sorted and filtered list of telemetry_metrics_groups.
          items:
            $ref: '#/components/schemas/TelemetryMetricsGroupResource'
          type: array
        totalElements:
          description: Count of items in the entire list, regardless of pagination.
          format: int32
          type: integer
      required:
      - telemetryMetricsGroups
      - totalElements
      - hasNext
      type: object
    ListTelemetryMetricsProfilesResponse:
      description: Response message for the ListTelemetryMetricsProfiles method.
      properties:
        hasNext:
          description: Inform if there are more elements
          type: boolean
        telemetryMetricsProfiles:
          description: Sorted and filtered list of telemetry_metrics_profiles.
          items:
            $ref: '#/components/schemas/TelemetryMetricsProfileResource'
          type: array
        totalElements:
          description: Count of items in the entire list, regardless of pagination.
          format: int32
          type: integer
      required:
      - telemetryMetricsProfiles
      - totalElements
      - hasNext
      type: object
    ListWorkloadMembersResponse:
      description: Response message for the ListWorkloadMembers method.
      properties:
        hasNext:
          description: Inform if there are more elements
          type: boolean
        totalElements:
          description: Count of items in the entire list, regardless of pagination.
          format: int32
          type: integer
        workloadMembers:
          description: Sorted and filtered list of workload_members.
          items:
            $ref: '#/components/schemas/WorkloadMember'
          type: array
      required:
      - workloadMembers
      - totalElements
      - hasNext
      type: object
    ListWorkloadsResponse:
      description: Response message for the ListWorkloads method.
      properties:
        hasNext:
          description: Inform if there are more elements
          type: boolean
        totalElements:
          description: Count of items in the entire list, regardless of pagination.
          format: int32
          type: integer
        workloads:
          description: Sorted and filtered list of workloads.
          items:
            $ref: '#/components/schemas/WorkloadResource'
          type: array
      required:
      - workloads
      - totalElements
      - hasNext
      type: object
    LocalAccountResource:
      properties:
        createdAt:
          description: Timestamp for the creation of the resource.
          readOnly: true
          type: string
        resourceId:
          description: resource identifier
          pattern: ^localaccount-[0-9a-f]{8}$
          readOnly: true
          type: string
        sshKey:
          description: SSH Public Key of EN
          pattern: ^(ssh-ed25519|ecdsa-sha2-nistp521) ([A-Za-z0-9+/=]+) ?(.*)?$
          type: string
        updatedAt:
          description: Timestamp for the last update of the resource.
          readOnly: true
          type: string
        username:
          description: Username provided by admin
          pattern: ^[a-z][a-z0-9-]{0,31}$
          type: string
      required:
      - username
      - sshKey
      type: object
    MetadataItem:
      description: A metadata item, represented by a key:value pair.
      properties:
        key:
          description: The metadata key.
          maxLength: 316
          pattern: ^$|^[a-z.]+/$|^[a-z.]+/[a-z0-9][a-z0-9-_.]*[a-z0-9]$|^[a-z.]+/[a-z0-9]$|^[a-z]$|^[a-z0-9][a-z0-9-_.]*[a-z0-9]$
          type: string
        value:
          description: The metadata value.
          maxLength: 63
          pattern: ^$|^[a-z0-9]$|^[a-z0-9][a-z0-9._-]*[a-z0-9]$
          type: string
      required:
      - key
      - value
      type: object
    OnboardHostResponse:
      description: Response of a Host Register request.
      type: object
    OperatingSystemResource:
      description: An OS resource.
      properties:
        architecture:
          description: The OS resource's CPU architecture.
          maxLength: 20
          pattern: ^$|^[a-zA-Z-_0-9./:;=@?!#,<>*()" ]+$
          type: string
        createdAt:
          description: Timestamp for the creation of the resource.
          readOnly: true
          type: string
        imageId:
          description: A unique identifier of the OS image that can be retrieved from
            the running OS.
          maxLength: 500
          pattern: ^$|^[a-zA-Z-_0-9./:;=@?!#,<>*()" ]+$
          type: string
        imageUrl:
          description: The URL repository of the OS image.
          maxLength: 500
          pattern: ^$|^[a-zA-Z-_0-9./:;=@?!#,<>*()" ]+$
          type: string
        installedPackages:
          description: Freeform text, OS-dependent. A list of package names, one per
            line (newline separated). Must not contain version information.
          maxLength: 500000
          pattern: |-
            ^$|^[a-zA-Z-_0-9./:;=@?!#,<>*()" \
            ]+$
          type: string
        kernelCommand:
          description: The OS resource's kernel Command Line Options.
          maxLength: 500
          pattern: ^$|^[a-zA-Z-_0-9./:;=@?!#,<>*()" ]+$
          type: string
        name:
          description: The OS resource's name.
          maxLength: 128
          pattern: '^$|^[a-zA-Z-_0-9./: ()]+$'
          type: string
        osProvider:
          description: Indicating the provider of OS (e.g., Infra or Lenovo).
          enum:
          - OS_PROVIDER_KIND_INFRA
          - OS_PROVIDER_KIND_LENOVO
          format: enum
          type: string
        osResourceId:
          description: The OS resource's unique identifier. Alias of resourceId.
          pattern: ^os-[0-9a-f]{8}$
          readOnly: true
          type: string
        osType:
          description: Indicating the type of OS (for example, mutable or immutable).
          enum:
          - OS_TYPE_MUTABLE
          - OS_TYPE_IMMUTABLE
          format: enum
          type: string
        platformBundle:
          description: Opaque JSON field storing references to custom installation
            script(s) that supplements the base OS with additional OS-level dependencies/configurations.  If
            empty, the default OS installation will be used.
          readOnly: true
          type: string
        profileName:
          description: Name of an OS profile that the OS resource belongs to. Uniquely
            identifies a family of OS resources.
          maxLength: 128
          pattern: ^$|^[a-zA-Z-_0-9./:;=@?!#,<>*()" ]+$
          type: string
        profileVersion:
          description: Version of OS profile that the OS resource belongs to.
          readOnly: true
          type: string
        repoUrl:
          description: // OS image URL. URL of the original installation source.
          maxLength: 500
          pattern: ^$|^[a-zA-Z-_0-9./:;=@?!#,<>*()" ]+$
          type: string
        resourceId:
          description: Resource ID, generated by inventory on Create.
          pattern: ^os-[0-9a-f]{8}$
          readOnly: true
          type: string
        securityFeature:
          description: Indicating if this OS is capable of supporting features like
            Secure Boot (SB) and Full Disk Encryption (FDE). Immutable after creation.
          enum:
          - SECURITY_FEATURE_NONE
          - SECURITY_FEATURE_SECURE_BOOT_AND_FULL_DISK_ENCRYPTION
          format: enum
          type: string
        sha256:
          description: SHA256 checksum of the OS resource in hexadecimal representation.
          maxLength: 64
          minLength: 64
          pattern: ^[a-f0-9]+$
          type: string
        updateSources:
          description: The list of OS resource update sources. Should be in 'DEB822
            Source Format' for Debian style OSs
          items:
            pattern: ^$|^[a-zA-Z-_0-9./:;=@?!#,<>*+()"\ \\\n]+$
            type: string
          type: array
        updatedAt:
          description: Timestamp for the last update of the resource.
          readOnly: true
          type: string
      required:
      - updateSources
      - sha256
      type: object
    ProviderResource:
      description: A provider resource.
      properties:
        apiCredentials:
          description: The provider resource's list of credentials.
          items:
            maxLength: 500
            pattern: ^[^|]*$
            type: string
          type: array
        apiEndpoint:
          description: The provider resource's API endpoint.
          pattern: ^$|^[a-zA-Z-_0-9./:;=?@!#,<>*() ]+$
          type: string
        config:
          description: Opaque provider configuration.
          pattern: ^$|^[a-zA-Z-_0-9./:;=?@!#,<>*() ]+$
          type: string
        createdAt:
          description: Timestamp for the creation of the resource.
          readOnly: true
          type: string
        name:
          description: The provider resource's name.
          pattern: '^$|^[a-zA-Z-_0-9./: ]+$'
          type: string
        providerId:
          description: The provider resource's unique identifier. Alias of resourceId.
          pattern: ^provider-[0-9a-f]{8}$
          readOnly: true
          type: string
        providerKind:
          description: The provider kind.
          enum:
          - PROVIDER_KIND_BAREMETAL
          format: enum
          type: string
        providerVendor:
          description: The provider vendor.
          enum:
          - PROVIDER_VENDOR_LENOVO_LXCA
          - PROVIDER_VENDOR_LENOVO_LOCA
          format: enum
          type: string
        resourceId:
          description: Resource ID, generated by the inventory on Create.
          pattern: ^provider-[0-9a-f]{8}$
          readOnly: true
          type: string
        updatedAt:
          description: Timestamp for the last update of the resource.
          readOnly: true
          type: string
      required:
      - providerKind
      - name
      - apiEndpoint
      type: object
    RegionResource:
      description: A region resource.
      properties:
        createdAt:
          description: Timestamp for the creation of the resource.
          readOnly: true
          type: string
        inheritedMetadata:
          description: The rendered metadata from the Region parent(s) that can be
            inherited by the Region, represented by a list of key:value pairs. This
            field can not be used in filter.
          items:
            $ref: '#/components/schemas/MetadataItem'
          readOnly: true
          type: array
        metadata:
          description: The metadata associated to the Region, represented by a list
            of key:value pairs.
          items:
            $ref: '#/components/schemas/MetadataItem'
          type: array
        name:
          description: The user-provided, human-readable name of region
          maxLength: 50
          pattern: '^$|^[a-zA-Z-_0-9./: ]+$'
          type: string
        parentId:
          description: The parent Region unique identifier that the region is associated
            to, when existent. This field can not be used in filter.
          pattern: ^$|^region-[0-9a-f]{8}$
          type: string
          writeOnly: true
        parentRegion:
          $ref: '#/components/schemas/RegionResource'
        regionId:
          description: The Region unique identifier. Alias of resourceId.
          pattern: ^region-[0-9a-f]{8}$
          readOnly: true
          type: string
        resourceId:
          description: resource ID, generated by the inventory on Create.
          pattern: ^region-[0-9a-f]{8}$
          readOnly: true
          type: string
        totalSites:
          description: The total number of sites in the region.
          format: int32
          readOnly: true
          type: integer
        updatedAt:
          description: Timestamp for the last update of the resource.
          readOnly: true
          type: string
      type: object
    RepeatedScheduleResource:
      description: A repeated-schedule resource.
      properties:
        createdAt:
          description: Timestamp for the creation of the resource.
          readOnly: true
          type: string
        cronDayMonth:
          description: cron style day of month (1-31), it can be empty only when used
            in a Filter
          pattern: ^([*]|([1-9]|([12][0-9])|3[01])((,([1-9]|([12][0-9])|3[01]))*))$
          type: string
        cronDayWeek:
          description: cron style day of week (0-6), it can be empty only when used
            in a Filter
          pattern: ^([*]|([0-6])((,([0-6]))*))$
          type: string
        cronHours:
          description: cron style hours (0-23), it can be empty only when used in
            a Filter
          pattern: ^([*]|([0-9]|1[0-9]|2[0-3])((,([0-9]|1[0-9]|2[0-3]))*))$
          type: string
        cronMinutes:
          description: cron style minutes (0-59), it can be empty only when used in
            a Filter.
          pattern: ^([*]|([0-9]|([1-5][0-9]))((,([0-9]|([1-5][0-9])))*))$
          type: string
        cronMonth:
          description: cron style month (1-12), it can be empty only when used in
            a Filter
          pattern: ^([*]|([1-9]|1[012])((,([1-9]|1[012]))*))$
          type: string
        durationSeconds:
          description: The duration in seconds of the repeated schedule, per schedule.
          format: uint32
          type: integer
        name:
          description: The schedule's name.
          maxLength: 50
          pattern: '^$|^[a-zA-Z-_0-9./: ]+$'
          type: string
        repeatedScheduleId:
          description: The repeated schedule's unique identifier. Alias of resourceId.
          pattern: ^repeatedsche-[0-9a-f]{8}$
          readOnly: true
          type: string
        resourceId:
          description: Resource ID, generated by the inventory on Create.
          pattern: ^repeatedsche-[0-9a-f]{8}$
          readOnly: true
          type: string
        scheduleStatus:
          description: The schedule status.
          enum:
          - SCHEDULE_STATUS_MAINTENANCE
          - SCHEDULE_STATUS_OS_UPDATE
          format: enum
          type: string
        targetHost:
          $ref: '#/components/schemas/HostResource'
        targetHostId:
          description: The target region ID of the schedule. Only one target can be
            provided per schedule. This field cannot be used as filter.
          pattern: ^$|^host-[0-9a-f]{8}$
          type: string
          writeOnly: true
        targetRegion:
          $ref: '#/components/schemas/RegionResource'
        targetRegionId:
          description: The target region ID of the schedule. Only one target can be
            provided per schedule. This field cannot be used as filter.
          pattern: ^$|^region-[0-9a-f]{8}$
          type: string
          writeOnly: true
        targetSite:
          $ref: '#/components/schemas/SiteResource'
        targetSiteId:
          description: The target site ID of the schedule. Only one target can be
            provided per schedule. This field cannot be used as filter.
          pattern: ^$|^site-[0-9a-f]{8}$
          type: string
          writeOnly: true
        updatedAt:
          description: Timestamp for the last update of the resource.
          readOnly: true
          type: string
      required:
      - scheduleStatus
      - durationSeconds
      - cronMinutes
      - cronHours
      - cronDayMonth
      - cronMonth
      - cronDayWeek
      type: object
    SingleScheduleResource:
      description: A single schedule resource.
      properties:
        createdAt:
          description: Timestamp for the creation of the resource.
          readOnly: true
          type: string
        endSeconds:
          description: The end time in seconds, of the single schedule. The value
            of endSeconds must be equal to or bigger than the value of startSeconds.
          format: uint32
          type: integer
        name:
          description: The schedule's name.
          maxLength: 50
          pattern: '^$|^[a-zA-Z-_0-9./: ]+$'
          type: string
        resourceId:
          description: Resource ID, generated by the inventory on Create.
          pattern: ^singlesche-[0-9a-f]{8}$
          readOnly: true
          type: string
        scheduleStatus:
          description: The schedule status.
          enum:
          - SCHEDULE_STATUS_MAINTENANCE
          - SCHEDULE_STATUS_OS_UPDATE
          format: enum
          type: string
        singleScheduleId:
          description: The single schedule resource's unique identifier. Alias of
            resourceId.
          pattern: ^singlesche-[0-9a-f]{8}$
          readOnly: true
          type: string
        startSeconds:
          description: The start time in seconds, of the single schedule.
          format: uint32
          type: integer
        targetHost:
          $ref: '#/components/schemas/HostResource'
        targetHostId:
          description: The target host ID of the schedule. Only one target can be
            provided per schedule. This field cannot be used as filter.
          pattern: ^$|^host-[0-9a-f]{8}$
          type: string
          writeOnly: true
        targetRegion:
          $ref: '#/components/schemas/RegionResource'
        targetRegionId:
          description: The target region ID of the schedule. Only one target can be
            provided per schedule. This field cannot be used as filter.
          pattern: ^$|^region-[0-9a-f]{8}$
          type: string
          writeOnly: true
        targetSite:
          $ref: '#/components/schemas/SiteResource'
        targetSiteId:
          description: The target site ID of the schedule. Only one target can be
            provided per schedule. This field cannot be used as filter.
          pattern: ^$|^site-[0-9a-f]{8}$
          type: string
          writeOnly: true
        updatedAt:
          description: Timestamp for the last update of the resource.
          readOnly: true
          type: string
      required:
      - scheduleStatus
      - startSeconds
      type: object
    SiteResource:
      description: A site resource.
      properties:
        createdAt:
          description: Timestamp for the creation of the resource.
          readOnly: true
          type: string
        inheritedMetadata:
          description: The rendered metadata from the Region parent(s) that can be
            inherited by the Region, represented by a list of key:value pairs. This
            field can not be used in filter.
          items:
            $ref: '#/components/schemas/MetadataItem'
          readOnly: true
          type: array
        metadata:
          description: The metadata associated to the Region, represented by a list
            of key:value pairs.
          items:
            $ref: '#/components/schemas/MetadataItem'
          type: array
        name:
          description: The site's human-readable name.
          maxLength: 50
          pattern: '^$|^[a-zA-Z-_0-9./: ]+$'
          type: string
        provider:
          $ref: '#/components/schemas/ProviderResource'
        region:
          $ref: '#/components/schemas/RegionResource'
        regionId:
          description: The region's unique identifier that the site is associated
            to. This field cannot be used in filter.
          pattern: ^$|^region-[0-9a-f]{8}$
          type: string
          writeOnly: true
        resourceId:
          description: resource ID, generated by the inventory on Create.
          pattern: ^site-[0-9a-f]{8}$
          readOnly: true
          type: string
        siteId:
          description: The site unique identifier. Alias of resourceId.
          pattern: ^site-[0-9a-f]{8}$
          type: string
        siteLat:
          description: The geolocation latitude of the site. Points are represented
            as latitude-longitude pairs in the E7 representation (degrees are multiplied
            by 10**7 and rounded to the nearest integer). siteLat must be in the range
            of +/- 90 degrees.
          format: int32
          maximum: 9e+08
          type: integer
        siteLng:
          description: The geolocation longitude of the site. Points are represented
            as latitude-longitude pairs in the E7 representation (degrees are multiplied
            by 10**7 and rounded to the nearest integer). siteLng must be in the range
            of +/- 180 degrees (inclusive).
          format: int32
          maximum: 1.8e+09
          type: integer
        updatedAt:
          description: Timestamp for the last update of the resource.
          readOnly: true
          type: string
      type: object
    Status:
      description: 'The `Status` type defines a logical error model that is suitable
        for different programming environments, including REST APIs and RPC APIs.
        It is used by [gRPC](https://github.com/grpc). Each `Status` message contains
        three pieces of data: error code, error message, and error details. You can
        find out more about this error model and how to work with it in the [API Design
        Guide](https://cloud.google.com/apis/design/errors).'
      properties:
        code:
          description: The status code, which should be an enum value of [google.rpc.Code][google.rpc.Code].
          format: int32
          type: integer
        details:
          description: A list of messages that carry the error details.  There is
            a common set of message types for APIs to use.
          items:
            $ref: '#/components/schemas/GoogleProtobufAny'
          type: array
        message:
          description: A developer-facing error message, which should be in English.
            Any user-facing error message should be localized and sent in the [google.rpc.Status.details][google.rpc.Status.details]
            field, or localized by the client.
          type: string
      type: object
    TelemetryLogsGroupResource:
      description: TelemetryLogsGroupResource.
      properties:
        collectorKind:
          description: The collector kind.
          enum:
          - COLLECTOR_KIND_HOST
          - COLLECTOR_KIND_CLUSTER
          format: enum
          type: string
        createdAt:
          description: Timestamp for the creation of the resource.
          readOnly: true
          type: string
        groups:
          description: A list of log groups to collect.
          items:
            pattern: ^$|^[a-zA-Z-_0-9./:;=@?!#,<>*()" ]+$
            type: string
          type: array
        name:
          description: Human-readable name for the log group.
          maxLength: 50
          pattern: '^$|^[a-zA-Z-_0-9./: ]+$'
          type: string
        resourceId:
          description: Unique ID of the telemetry group.
          pattern: ^telemetrygroup-[0-9a-f]{8}$
          readOnly: true
          type: string
        telemetryLogsGroupId:
          description: Unique ID of the telemetry group. Alias of resource_id.
          pattern: ^telemetrygroup-[0-9a-f]{8}$
          readOnly: true
          type: string
        updatedAt:
          description: Timestamp for the last update of the resource.
          readOnly: true
          type: string
      required:
      - name
      - collectorKind
      - groups
      type: object
    TelemetryLogsProfileResource:
      description: A telemetry log profile for a hierarchy object.
      properties:
        createdAt:
          description: Timestamp for the creation of the resource.
          readOnly: true
          type: string
        logLevel:
          description: The log level og the telemetry profile.
          enum:
          - SEVERITY_LEVEL_CRITICAL
          - SEVERITY_LEVEL_ERROR
          - SEVERITY_LEVEL_WARN
          - SEVERITY_LEVEL_INFO
          - SEVERITY_LEVEL_DEBUG
          format: enum
          type: string
        logsGroup:
          $ref: '#/components/schemas/TelemetryLogsGroupResource'
        logsGroupId:
          description: The unique identifier of the telemetry log group.
          pattern: ^telemetrygroup-[0-9a-f]{8}$
          type: string
        profileId:
          description: The ID of the telemetry profile.
          pattern: ^telemetryprofile-[0-9a-f]{8}$
          readOnly: true
          type: string
        resourceId:
          description: The ID of the telemetry profile.
          pattern: ^telemetryprofile-[0-9a-f]{8}$
          readOnly: true
          type: string
        targetInstance:
          description: The ID of the instance that the telemetry profile is assigned
            to. Can only be one of targetInstance, targetSite, or targetRegion.
          pattern: ^$|^inst-[0-9a-f]{8}$
          type: string
        targetRegion:
          description: The ID of the region where the telemetry profile is assigned
            to. Can only be one of targetInstance, targetSite, or targetRegion.
          pattern: ^$|^region-[0-9a-f]{8}$
          type: string
        targetSite:
          description: The ID of the site where the telemetry profile is assigned
            to. Can only be one of targetInstance, targetSite, or targetRegion.
          pattern: ^$|^site-[0-9a-f]{8}$
          type: string
        updatedAt:
          description: Timestamp for the last update of the resource.
          readOnly: true
          type: string
      required:
      - logLevel
      - logsGroupId
      type: object
    TelemetryMetricsGroupResource:
      description: TelemetryMetricsGroupResource.
      properties:
        collectorKind:
          description: The collector kind.
          enum:
          - COLLECTOR_KIND_HOST
          - COLLECTOR_KIND_CLUSTER
          format: enum
          type: string
        createdAt:
          description: Timestamp for the creation of the resource.
          readOnly: true
          type: string
        groups:
          description: A list of log groups to collect.
          items:
            pattern: ^$|^[a-zA-Z-_0-9./:;=@?!#,<>*()" ]+$
            type: string
          type: array
        name:
          description: Human-readable name for the log group.
          maxLength: 50
          pattern: '^$|^[a-zA-Z-_0-9./: ]+$'
          type: string
        resourceId:
          description: Unique ID of the telemetry group.
          pattern: ^telemetrygroup-[0-9a-f]{8}$
          readOnly: true
          type: string
        telemetryMetricsGroupId:
          description: Unique ID of the telemetry group. Alias of resource_id.
          pattern: ^telemetrygroup-[0-9a-f]{8}$
          readOnly: true
          type: string
        updatedAt:
          description: Timestamp for the last update of the resource.
          readOnly: true
          type: string
      required:
      - name
      - collectorKind
      - groups
      type: object
    TelemetryMetricsProfileResource:
      description: A telemetry metric profile for a hierarchy object.
      properties:
        createdAt:
          description: Timestamp for the creation of the resource.
          readOnly: true
          type: string
        metricsGroup:
          $ref: '#/components/schemas/TelemetryMetricsGroupResource'
        metricsGroupId:
          description: The unique identifier of the telemetry metric group.
          pattern: ^telemetrygroup-[0-9a-f]{8}$
          type: string
        metricsInterval:
          description: Metric interval (in seconds) for the telemetry profile. This
            field must only be defined if the type equals to TELEMETRY_CONFIG_KIND_METRICS.
          format: uint32
          type: integer
        profileId:
          description: The ID of the telemetry profile.
          pattern: ^telemetryprofile-[0-9a-f]{8}$
          readOnly: true
          type: string
        resourceId:
          description: The ID of the telemetry profile.
          pattern: ^telemetryprofile-[0-9a-f]{8}$
          readOnly: true
          type: string
        targetInstance:
          description: The ID of the instance that the telemetry profile is assigned
            to. Can only be one of targetInstance, targetSite, or targetRegion.
          pattern: ^$|^inst-[0-9a-f]{8}$
          type: string
        targetRegion:
          description: The ID of the region where the telemetry profile is assigned
            to. Can only be one of targetInstance, targetSite, or targetRegion.
          pattern: ^$|^region-[0-9a-f]{8}$
          type: string
        targetSite:
          description: The ID of the site where the telemetry profile is assigned
            to. Can only be one of targetInstance, targetSite, or targetRegion.
          pattern: ^$|^site-[0-9a-f]{8}$
          type: string
        updatedAt:
          description: Timestamp for the last update of the resource.
          readOnly: true
          type: string
      required:
      - metricsInterval
      - metricsGroupId
      type: object
    WorkloadMember:
      description: Intermediate resource to represent a relation between a workload
        and a compute resource (i.e., instance).
      properties:
        createdAt:
          description: Timestamp for the creation of the resource.
          readOnly: true
          type: string
        instance:
          $ref: '#/components/schemas/InstanceResource'
        instanceId:
          description: The unique identifier of the instance.
          pattern: ^inst-[0-9a-f]{8}$
          type: string
          writeOnly: true
        kind:
          description: The kind of the workload member.
          enum:
          - WORKLOAD_MEMBER_KIND_CLUSTER_NODE
          format: enum
          type: string
        member:
          $ref: '#/components/schemas/InstanceResource'
        resourceId:
          description: Resource ID, generated by the inventory on Create.
          pattern: ^workloadmember-[0-9a-f]{8}$
          readOnly: true
          type: string
        updatedAt:
          description: Timestamp for the last update of the resource.
          readOnly: true
          type: string
        workload:
          $ref: '#/components/schemas/WorkloadResource'
        workloadId:
          description: The workload unique identifier.
          pattern: ^workload-[0-9a-f]{8}$
          type: string
          writeOnly: true
        workloadMemberId:
          description: The workload unique identifier. Alias of resourceId.
          pattern: ^workloadmember-[0-9a-f]{8}$
          readOnly: true
          type: string
      required:
      - kind
      - workloadId
      - instanceId
      type: object
    WorkloadResource:
      description: A generic way to group compute resources to obtain a workload.
      properties:
        createdAt:
          description: Timestamp for the creation of the resource.
          readOnly: true
          type: string
        externalId:
          description: The ID of the external resource, used to link to resources
            outside the realm of Edge Infrastructure Manager.
          pattern: '^$|^[a-zA-Z-_0-9./: ]+$'
          type: string
        kind:
          description: Type of workload.
          enum:
          - WORKLOAD_KIND_CLUSTER
          - WORKLOAD_KIND_DHCP
          format: enum
          type: string
        members:
          description: The members of the workload.
          items:
            $ref: '#/components/schemas/WorkloadMember'
          readOnly: true
          type: array
        name:
          description: Human-readable name for the workload.
          maxLength: 50
          pattern: '^$|^[a-zA-Z-_0-9./: ]+$'
          type: string
        resourceId:
          description: resource ID, generated by the inventory on Create.
          pattern: ^workload-[0-9a-f]{8}$
          readOnly: true
          type: string
        status:
          description: Human-readable status of the workload.
          pattern: ^$|^[a-zA-Z-_0-9./:;=?@!#,<>*() ]+$
          type: string
        updatedAt:
          description: Timestamp for the last update of the resource.
          readOnly: true
          type: string
        workloadId:
          description: The workload unique identifier. Alias of resourceId.
          pattern: ^workload-[0-9a-f]{8}$
          readOnly: true
          type: string
      required:
      - kind
      - members
      type: object
  securitySchemes:
    BearerAuth:
      bearerFormat: JWT
      scheme: bearer
      type: http
