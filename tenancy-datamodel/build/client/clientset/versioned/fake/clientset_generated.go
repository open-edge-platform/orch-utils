// SPDX-FileCopyrightText: (C) 2025 Intel Corporation
// SPDX-License-Identifier: Apache-2.0

/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	clientset "github.com/open-edge-platform/orch-utils/tenancy-datamodel/build/client/clientset/versioned"
	apimappingconfigedgev1 "github.com/open-edge-platform/orch-utils/tenancy-datamodel/build/client/clientset/versioned/typed/apimappingconfig.edge-orchestrator.intel.com/v1"
	fakeapimappingconfigedgev1 "github.com/open-edge-platform/orch-utils/tenancy-datamodel/build/client/clientset/versioned/typed/apimappingconfig.edge-orchestrator.intel.com/v1/fake"
	configedgev1 "github.com/open-edge-platform/orch-utils/tenancy-datamodel/build/client/clientset/versioned/typed/config.edge-orchestrator.intel.com/v1"
	fakeconfigedgev1 "github.com/open-edge-platform/orch-utils/tenancy-datamodel/build/client/clientset/versioned/typed/config.edge-orchestrator.intel.com/v1/fake"
	folderedgev1 "github.com/open-edge-platform/orch-utils/tenancy-datamodel/build/client/clientset/versioned/typed/folder.edge-orchestrator.intel.com/v1"
	fakefolderedgev1 "github.com/open-edge-platform/orch-utils/tenancy-datamodel/build/client/clientset/versioned/typed/folder.edge-orchestrator.intel.com/v1/fake"
	networkedgev1 "github.com/open-edge-platform/orch-utils/tenancy-datamodel/build/client/clientset/versioned/typed/network.edge-orchestrator.intel.com/v1"
	fakenetworkedgev1 "github.com/open-edge-platform/orch-utils/tenancy-datamodel/build/client/clientset/versioned/typed/network.edge-orchestrator.intel.com/v1/fake"
	orgedgev1 "github.com/open-edge-platform/orch-utils/tenancy-datamodel/build/client/clientset/versioned/typed/org.edge-orchestrator.intel.com/v1"
	fakeorgedgev1 "github.com/open-edge-platform/orch-utils/tenancy-datamodel/build/client/clientset/versioned/typed/org.edge-orchestrator.intel.com/v1/fake"
	orgactivewatcheredgev1 "github.com/open-edge-platform/orch-utils/tenancy-datamodel/build/client/clientset/versioned/typed/orgactivewatcher.edge-orchestrator.intel.com/v1"
	fakeorgactivewatcheredgev1 "github.com/open-edge-platform/orch-utils/tenancy-datamodel/build/client/clientset/versioned/typed/orgactivewatcher.edge-orchestrator.intel.com/v1/fake"
	orgwatcheredgev1 "github.com/open-edge-platform/orch-utils/tenancy-datamodel/build/client/clientset/versioned/typed/orgwatcher.edge-orchestrator.intel.com/v1"
	fakeorgwatcheredgev1 "github.com/open-edge-platform/orch-utils/tenancy-datamodel/build/client/clientset/versioned/typed/orgwatcher.edge-orchestrator.intel.com/v1/fake"
	projectedgev1 "github.com/open-edge-platform/orch-utils/tenancy-datamodel/build/client/clientset/versioned/typed/project.edge-orchestrator.intel.com/v1"
	fakeprojectedgev1 "github.com/open-edge-platform/orch-utils/tenancy-datamodel/build/client/clientset/versioned/typed/project.edge-orchestrator.intel.com/v1/fake"
	projectactivewatcheredgev1 "github.com/open-edge-platform/orch-utils/tenancy-datamodel/build/client/clientset/versioned/typed/projectactivewatcher.edge-orchestrator.intel.com/v1"
	fakeprojectactivewatcheredgev1 "github.com/open-edge-platform/orch-utils/tenancy-datamodel/build/client/clientset/versioned/typed/projectactivewatcher.edge-orchestrator.intel.com/v1/fake"
	projectwatcheredgev1 "github.com/open-edge-platform/orch-utils/tenancy-datamodel/build/client/clientset/versioned/typed/projectwatcher.edge-orchestrator.intel.com/v1"
	fakeprojectwatcheredgev1 "github.com/open-edge-platform/orch-utils/tenancy-datamodel/build/client/clientset/versioned/typed/projectwatcher.edge-orchestrator.intel.com/v1/fake"
	runtimeedgev1 "github.com/open-edge-platform/orch-utils/tenancy-datamodel/build/client/clientset/versioned/typed/runtime.edge-orchestrator.intel.com/v1"
	fakeruntimeedgev1 "github.com/open-edge-platform/orch-utils/tenancy-datamodel/build/client/clientset/versioned/typed/runtime.edge-orchestrator.intel.com/v1/fake"
	runtimefolderedgev1 "github.com/open-edge-platform/orch-utils/tenancy-datamodel/build/client/clientset/versioned/typed/runtimefolder.edge-orchestrator.intel.com/v1"
	fakeruntimefolderedgev1 "github.com/open-edge-platform/orch-utils/tenancy-datamodel/build/client/clientset/versioned/typed/runtimefolder.edge-orchestrator.intel.com/v1/fake"
	runtimeorgedgev1 "github.com/open-edge-platform/orch-utils/tenancy-datamodel/build/client/clientset/versioned/typed/runtimeorg.edge-orchestrator.intel.com/v1"
	fakeruntimeorgedgev1 "github.com/open-edge-platform/orch-utils/tenancy-datamodel/build/client/clientset/versioned/typed/runtimeorg.edge-orchestrator.intel.com/v1/fake"
	runtimeprojectedgev1 "github.com/open-edge-platform/orch-utils/tenancy-datamodel/build/client/clientset/versioned/typed/runtimeproject.edge-orchestrator.intel.com/v1"
	fakeruntimeprojectedgev1 "github.com/open-edge-platform/orch-utils/tenancy-datamodel/build/client/clientset/versioned/typed/runtimeproject.edge-orchestrator.intel.com/v1/fake"
	tenancyedgev1 "github.com/open-edge-platform/orch-utils/tenancy-datamodel/build/client/clientset/versioned/typed/tenancy.edge-orchestrator.intel.com/v1"
	faketenancyedgev1 "github.com/open-edge-platform/orch-utils/tenancy-datamodel/build/client/clientset/versioned/typed/tenancy.edge-orchestrator.intel.com/v1/fake"

	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/watch"
	"k8s.io/client-go/discovery"
	fakediscovery "k8s.io/client-go/discovery/fake"
	"k8s.io/client-go/testing"
)

// NewSimpleClientset returns a clientset that will respond with the provided objects.
// It's backed by a very simple object tracker that processes creates, updates and deletions as-is,
// without applying any validations and/or defaults. It shouldn't be considered a replacement
// for a real clientset and is mostly useful in simple unit tests.
func NewSimpleClientset(objects ...runtime.Object) *Clientset {
	o := testing.NewObjectTracker(scheme, codecs.UniversalDecoder())
	for _, obj := range objects {
		if err := o.Add(obj); err != nil {
			panic(err)
		}
	}

	cs := &Clientset{tracker: o}
	cs.discovery = &fakediscovery.FakeDiscovery{Fake: &cs.Fake}
	cs.AddReactor("*", "*", testing.ObjectReaction(o))
	cs.AddWatchReactor("*", func(action testing.Action) (handled bool, ret watch.Interface, err error) {
		gvr := action.GetResource()
		ns := action.GetNamespace()
		watch, err := o.Watch(gvr, ns)
		if err != nil {
			return false, nil, err
		}
		return true, watch, nil
	})

	return cs
}

// Clientset implements clientset.Interface. Meant to be embedded into a
// struct to get a default implementation. This makes faking out just the method
// you want to test easier.
type Clientset struct {
	testing.Fake
	discovery *fakediscovery.FakeDiscovery
	tracker   testing.ObjectTracker
}

func (c *Clientset) Discovery() discovery.DiscoveryInterface {
	return c.discovery
}

func (c *Clientset) Tracker() testing.ObjectTracker {
	return c.tracker
}

var (
	_ clientset.Interface = &Clientset{}
	_ testing.FakeClient  = &Clientset{}
)

// ApimappingconfigEdgeV1 retrieves the ApimappingconfigEdgeV1Client
func (c *Clientset) ApimappingconfigEdgeV1() apimappingconfigedgev1.ApimappingconfigEdgeV1Interface {
	return &fakeapimappingconfigedgev1.FakeApimappingconfigEdgeV1{Fake: &c.Fake}
}

// ConfigEdgeV1 retrieves the ConfigEdgeV1Client
func (c *Clientset) ConfigEdgeV1() configedgev1.ConfigEdgeV1Interface {
	return &fakeconfigedgev1.FakeConfigEdgeV1{Fake: &c.Fake}
}

// FolderEdgeV1 retrieves the FolderEdgeV1Client
func (c *Clientset) FolderEdgeV1() folderedgev1.FolderEdgeV1Interface {
	return &fakefolderedgev1.FakeFolderEdgeV1{Fake: &c.Fake}
}

// NetworkEdgeV1 retrieves the NetworkEdgeV1Client
func (c *Clientset) NetworkEdgeV1() networkedgev1.NetworkEdgeV1Interface {
	return &fakenetworkedgev1.FakeNetworkEdgeV1{Fake: &c.Fake}
}

// OrgEdgeV1 retrieves the OrgEdgeV1Client
func (c *Clientset) OrgEdgeV1() orgedgev1.OrgEdgeV1Interface {
	return &fakeorgedgev1.FakeOrgEdgeV1{Fake: &c.Fake}
}

// OrgactivewatcherEdgeV1 retrieves the OrgactivewatcherEdgeV1Client
func (c *Clientset) OrgactivewatcherEdgeV1() orgactivewatcheredgev1.OrgactivewatcherEdgeV1Interface {
	return &fakeorgactivewatcheredgev1.FakeOrgactivewatcherEdgeV1{Fake: &c.Fake}
}

// OrgwatcherEdgeV1 retrieves the OrgwatcherEdgeV1Client
func (c *Clientset) OrgwatcherEdgeV1() orgwatcheredgev1.OrgwatcherEdgeV1Interface {
	return &fakeorgwatcheredgev1.FakeOrgwatcherEdgeV1{Fake: &c.Fake}
}

// ProjectEdgeV1 retrieves the ProjectEdgeV1Client
func (c *Clientset) ProjectEdgeV1() projectedgev1.ProjectEdgeV1Interface {
	return &fakeprojectedgev1.FakeProjectEdgeV1{Fake: &c.Fake}
}

// ProjectactivewatcherEdgeV1 retrieves the ProjectactivewatcherEdgeV1Client
func (c *Clientset) ProjectactivewatcherEdgeV1() projectactivewatcheredgev1.ProjectactivewatcherEdgeV1Interface {
	return &fakeprojectactivewatcheredgev1.FakeProjectactivewatcherEdgeV1{Fake: &c.Fake}
}

// ProjectwatcherEdgeV1 retrieves the ProjectwatcherEdgeV1Client
func (c *Clientset) ProjectwatcherEdgeV1() projectwatcheredgev1.ProjectwatcherEdgeV1Interface {
	return &fakeprojectwatcheredgev1.FakeProjectwatcherEdgeV1{Fake: &c.Fake}
}

// RuntimeEdgeV1 retrieves the RuntimeEdgeV1Client
func (c *Clientset) RuntimeEdgeV1() runtimeedgev1.RuntimeEdgeV1Interface {
	return &fakeruntimeedgev1.FakeRuntimeEdgeV1{Fake: &c.Fake}
}

// RuntimefolderEdgeV1 retrieves the RuntimefolderEdgeV1Client
func (c *Clientset) RuntimefolderEdgeV1() runtimefolderedgev1.RuntimefolderEdgeV1Interface {
	return &fakeruntimefolderedgev1.FakeRuntimefolderEdgeV1{Fake: &c.Fake}
}

// RuntimeorgEdgeV1 retrieves the RuntimeorgEdgeV1Client
func (c *Clientset) RuntimeorgEdgeV1() runtimeorgedgev1.RuntimeorgEdgeV1Interface {
	return &fakeruntimeorgedgev1.FakeRuntimeorgEdgeV1{Fake: &c.Fake}
}

// RuntimeprojectEdgeV1 retrieves the RuntimeprojectEdgeV1Client
func (c *Clientset) RuntimeprojectEdgeV1() runtimeprojectedgev1.RuntimeprojectEdgeV1Interface {
	return &fakeruntimeprojectedgev1.FakeRuntimeprojectEdgeV1{Fake: &c.Fake}
}

// TenancyEdgeV1 retrieves the TenancyEdgeV1Client
func (c *Clientset) TenancyEdgeV1() tenancyedgev1.TenancyEdgeV1Interface {
	return &faketenancyedgev1.FakeTenancyEdgeV1{Fake: &c.Fake}
}
